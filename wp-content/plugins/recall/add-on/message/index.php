<?phpclass rcl_message{		public $room;	public $user_lk;	public $ava_user_lk;	public $ava_user_ID;	    public function __construct() {			if (!is_admin()):			add_action('wp_enqueue_scripts', array(&$this, 'output_style_scripts_private_mess'));			add_action('init', array(&$this, 'delete_blacklist_user_recall_activate'));			add_action('init', array(&$this, 'delete_private_message_recall'));			add_action('init', array(&$this, 'old_status_message_recall_activate'));						add_filter('rcl_header_user',array(&$this, 'get_header_black_list_button'),5,2);			add_filter('the_button_wprecall',array(&$this, 'get_wprecall_privat_button'),1,2);			add_filter('the_block_wprecall',array(&$this, 'recall_user_private_message'),1,4);			add_filter('wp_head',array(&$this, 'add_global_update_new_mess_script'));			add_filter('wp_footer',array(&$this, 'add_rcl_new_mess_conteiner'));			//add_shortcode('chat',array(&$this, 'get_shortcode_chat'));		endif;				if (is_admin()):			add_filter('file_footer_scripts_rcl',array(&$this, 'get_footer_scripts_privat_rcl'));			add_filter('admin_options_wprecall',array(&$this, 'get_admin_private_mess_page_content'));			add_filter('file_scripts_rcl',array(&$this, 'get_scripts_message_rcl'));		endif;					add_action('wp_ajax_update_message_history_recall', array(&$this, 'update_message_history_recall'));		add_action('days_garbage_file_rcl', array(&$this, 'garbage_file_rcl')); 		add_action('wp', array(&$this, 'activation_days_garbage_file_rcl')); 		add_action('wp_ajax_add_private_message_recall', array(&$this, 'add_private_message_recall'));    }	function add_rcl_new_mess_conteiner(){		echo '<div id="rcl-new-mess"></div>';	}	function add_global_update_new_mess_script(){		global $rcl_options;		$global_update = 1000*$rcl_options['global_update_private_message'];		echo '<script type="text/javascript">var global_update_num_mess = '.$global_update.';</script>'."\n";	}	function output_style_scripts_private_mess(){		global $user_ID,$rcl_options,$post,$wpdb;		wp_enqueue_script( 'jquery' );		$glup = $rcl_options['global_update_private_message'];				if(!$glup) $new_mess = $wpdb->get_row("SELECT ID FROM ".RCL_PREF."private_message WHERE adressat_mess = '$user_ID' AND status_mess = '0' OR adressat_mess = '$user_ID' AND status_mess = '4'");		else $new_mess = true;		if($new_mess){			$scr = false;			if($rcl_options['view_user_lk_rcl']==1){				$get = 'user';				if($rcl_options['link_user_lk_rcl']!='') $get = $rcl_options['link_user_lk_rcl'];				if($user_ID==$_GET[$get]||$rcl_options['lk_page_rcl']!=$post->ID) $scr = true;				}else{				if(!is_author()||is_author($user_ID)) $scr = true;			}			if($scr) wp_enqueue_script( 'newmess_recall', plugins_url('js/new_mess.js', __FILE__) );		}		wp_enqueue_script( 'sounds_recall', plugins_url('js/ion.sound.min.js', __FILE__) );		}		function activation_days_garbage_file_rcl() {		global $rcl_options;		if(!$rcl_options['file_exchange']) return false;		if ( !wp_next_scheduled( 'days_garbage_file_rcl' ) ) {			$start_date = strtotime("2014-04-20 0:50:0");			wp_schedule_event( $start_date, 'daily', 'days_garbage_file_rcl');  		}  	}  	 	function garbage_file_rcl(){		global $wpdb,$rcl_options;				if(!$rcl_options['savetime_file']) $savetime = 7*24*3600;		else $savetime = $rcl_options['savetime_file']*24*3600;				$files = $wpdb->get_row("SELECT * FROM ".RCL_PREF."private_message WHERE status_mess = '4' AND status_mess = '5' AND time_mess < (NOW() - INTERVAL $savetime SECOND)");				if(!$files) return false;				$upload_dir = wp_upload_dir();		foreach($files as $file){			$name = explode('/',$file->content_mess);			$cnt = count($name);			$f_name = $name[--$cnt];					$path_temp = $upload_dir['basedir'].'/temp-files/'.$f_name;			unlink($path_temp);		}				$wpdb->query("DELETE FROM ".RCL_PREF."private_message WHERE status_mess = '4' AND status_mess = '5' AND time_mess < (NOW() - INTERVAL $savetime SECOND)");			}		function get_admin_private_mess_page_content($content){		global $rcl_options;				if(!$rcl_options['file_exchange']){			wp_clear_scheduled_hook('days_garbage_file_rcl');		}				$content .='<h2>Настройки личных сообщений</h2>		<div id="options-'.get_key_addon_rcl(pathinfo(__FILE__)).'" class="wrap-recall-options">					<div class="option-block">				<h3>Личные сообщения</h3>				<label>Название вкладки в ЛК</label>';				if(!$rcl_options['tab_private']) $rcl_options['tab_private'] = 'Приватный чат';				$content .='<input type="text" name="tab_private" value="'.$rcl_options['tab_private'].'" size="10">				<small>Впишите свою надпись на кнопке переключения вкладки в личном кабинете</small>				<label>Количество сообщений в переписке</label>				<input type="text" name="max_private_message" value="'.$rcl_options['max_private_message'].'" size="3">				<small>по-умолчанию 100 сообщений в переписке (на каждую переписку пользователя)</small>				<label>Пауза между запросами на получение новых сообщений на странице переписки с другим пользователем в секундах</label>				<input type="text" name="update_private_message" value="'.$rcl_options['update_private_message'].'" size="3">				<label>Количество запросов на получение нового сообщения на странице переписки</label>				<input type="text" name="max_request_new_message" value="'.$rcl_options['max_request_new_message'].'" size="3">				<small>Укажите максимально количество запросов для получения нового сообщения от собеседника на странице ведения переписки. Если количество запросов превысит указанное значение, то запросы прекратяться. Если ничего не указано или указан ноль, то ограничения нет.</small>					<label>Пауза между запросами на получение новых сообщений на всех других страницах сайта в секундах</label>				<input type="text" name="global_update_private_message" value="'.$rcl_options['global_update_private_message'].'" size="3">				<small>Если ноль, то получение новых сообщений только в момент загрузки страницы без последующих запросов</small>								<label>Обмен файлами</label>';				$file_exchange = $rcl_options['file_exchange'];				$content .= '<select name="file_exchange" size="1">									<option value="">Запрещено</option>					<option value="1" '.selected($file_exchange,1,false).'>Разрешено</option>				</select>				<label>Максимальный размер файлов, Mb</label>				<input type="text" name="file_exchange_weight" value="'.$rcl_options['file_exchange_weight'].'" size="30">				<small>Ограничить загрузку файлов данным значением в мегабайтах. По-умолчанию, 2мб</small>				<label>Время хранения файла</label>				<input type="text" name="savetime_file" value="'.$rcl_options['savetime_file'].'" size="30">				<small>Укажите максимальное время хранения невостребованных файлов в днях. По истечении этого срока файла будет удален. По-умолчанию 7 дней.</small>				<label>Лимит непринятых файлов</label>				<input type="text" name="file_limit" value="'.$rcl_options['file_limit'].'" size="30">				<small>Укажите количеств файлов непринятых адресатами при котором у пользователя пропадает возможность дальнейшей пересылки файлов. Защита от спама. По-умолчанию - без ограничений.</small>			</div>		</div>';		return $content;	}		function get_header_black_list_button($header_lk,$author_lk){		global $user_ID;		global $wpdb;			if($user_ID&&$user_ID!=$author_lk){					$banlist = $wpdb->get_row("SELECT * FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID' AND ban = '$author_lk'");			if(!$banlist){				$header_lk .= '<div id="add_black_list_button" style="float: right;" >						<input id="add_black_list" type="button" class="recall-button" name="'.$author_lk.'" value="В черный список">						</div>';			}else{				$header_lk .= '<div style="text-align:center;float:right;font-weight:bold;padding:5px;border:1px solid #aaa;">Пользователь<br /> в черном списке					<form style="" method="post" action="">					<input type="hidden" name="ban_user" value="'.$banlist->ban.'">					<input id="remove_black_list" class="recall-button" name="remove_black_list" type="submit" value="Разблокировать">					</form>					</div>';			}		}		return $header_lk;	}	function mess_preg_replace_rcl($mess){		//$mess = $this->oembed_filter( $mess );		//$mess = wp_oembed_get($mess);		$mess = preg_replace("~(http|https|ftp|ftps)://(.*?)(\s|\n|[,.?!](\s|\n)|$)~", '<a target="_blank" href="$1://$2">$1://$2</a>$3', $mess);		//$mess = make_clickable($mess);		return $mess;	}		function oembed_filter( $text ) {		global $wp_embed;		// Automatic discovery would be a security risk, safety first		add_filter( 'embed_oembed_discover', '__return_false', 999 );		//$text = $wp_embed->autoembed( $text );		// ...but don't break your posts if you use it		remove_filter( 'embed_oembed_discover', '__return_false', 999 );		return $text;	}		function get_wprecall_privat_button($button,$author_lk){		global $rcl_options;		if(!$button) $status = 'active';		if(!$rcl_options['tab_private']) $rcl_options['tab_private'] = 'Приватный чат';		$button .= ' <a href="#" id="privat" class="block_button '.$status.'">'.$rcl_options['tab_private'].'</a> ';		return $button;	}		function recall_user_private_message($block_wprecall, $author_lk, $online, $ban){		global $user_ID;		global $rcl_options;		//global $rcl_action_users;				if(!$block_wprecall) $status = 'active';				$privat_block .= '<div class="privat_block recall_content_block '.$status.'">';		if($ban){			$privat_block .= '<span style="color:red;">Пользователь запретил писать ему.</span>';		}		if(!$user_ID){			$privat_block .= 'Авторизуйтесь, чтобы начать переписку с пользователем.</div>';			$block_wprecall .= $privat_block;			return $block_wprecall;		}		$privat_block .= $this->get_private_message_content($author_lk, $online, $ban);					$privat_block .= '</div>';				$block_wprecall .= $privat_block;				return $block_wprecall;	}	function get_private_message_content($user_id, $online, $room=false){		global $user_ID,$rcl_options,$wpdb,$rcl_user_LK;				//if(!$rcl_user_LK) 		$this->user_lk = $user_id;		if($user_ID==$this->user_lk){			$privat_block .= '<div class="correspond">';			$contacts = $wpdb->get_col("SELECT contact FROM ".RCL_PREF."private_contacts WHERE user = '$user_ID' AND status = '1'");			if($contacts){							$days = 7;											$privat_block .= '<p>Переписка за <a data="'.$days.'" class="sec_block_button active" href="#">'.$days.' дней</a>				<a data="30" class="sec_block_button" href="#">месяц</a> 				<a data="0" class="sec_block_button" href="#">все время</a>';								$ban = $wpdb->get_var("SELECT ID FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID'");							if(isset($ban)) $privat_block .= '<a data="-1" class="sec_block_button" href="#">Черный список</a>';								$privat_block .= '</p>							<div id="contact-lists">';								$privat_block .= $this->get_loop_contacts_rcl($contacts,$days);									$privat_block .= '</div>';						} else {				$privat_block .= '<div class="single_correspond"><p>Вы еще ни с кем не вели переписку</p></div>';			}			$privat_block .= '</div>';				} else {			if(!$banlist){				if($room) $and = "AND status_mess = '$room'";				$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' $and ORDER BY id DESC");								$num_mess = count($private_messages);					$this->ava_user_lk = get_avatar($this->user_lk, 40);				$this->ava_user_ID = get_avatar($user_ID, 40);								$max_private_mess = $rcl_options['max_private_message'];				if(!$max_private_mess) $max_private_mess = 100;				if($num_mess>$max_private_mess){					$delete = $num_mess - $max_private_mess;					$delete_num = $wpdb->query("DELETE FROM ".RCL_PREF."private_message WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' ORDER BY id ASC LIMIT $delete");					$num_mess = $num_mess - $delete_num;				}				if(!$ban){					$privat_block .= '<div class="prmess">';					if($rcl_options['file_exchange']==1){						$privat_block .= '<div id="simple-btn" class="btn btn-success js-fileapi-wrapper">						   <div class="js-browse">							  <span class="btn-txt">выбрать файл</span>							  <input name="filedata" type="file">						   </div>						   <div class="js-upload" style="display: none">							  <div class="progress progress-success">								 <div class="js-progress bar"></div>							  </div>							  <span class="btn-txt">загрузка (<span class="js-size"></span>)</span>						   </div>						</div>';					}					if($online == 0) $privat_block .='<span style="color:blue;font-size:10px;">Пользователь получит уведомление на email</span>';					if($rcl_options['file_exchange']==1){						$privat_block .= '<div id="upload-files-mess">						<div id="dnd" class="b-upload b-upload_dnd">							<div class="b-upload__dnd"><textarea name="content_mess" id="content_mess" rows="3" style="width:98%;padding:5px;"></textarea></div>						   <div class="b-upload__dnd-not-supported">														  <div class="btn btn-success js-fileapi-wrapper">								 								 <input name="filedata" multiple="" type="file">							  </div>						   </div>						   						   <div class="js-files b-upload__files">							  <div class="js-file-tpl b-thumb" data-id="<%=uid%>" title="<%-name%>, <%-sizeText%>">																 <div class="b-thumb__progress progress progress-small"><div class="bar"></div></div>								 <div class="b-thumb__name"><%-name%></div>							  </div>						   </div>						</div>						</div>';					}else{						$privat_block .= '<textarea name="content_mess" id="content_mess" rows="3" style="width:98%;padding:5px;"></textarea>';					}					$privat_block .= '<input type="hidden" name="adressat_mess" id="adressat_mess" value="'.$this->user_lk.'">					<input type="hidden" name="online" id="online" value="'.$online.'">					<p align="right" style="margin: 0px; float: right;"><small><b>Enter</b> - перенос строки, <b>Ctrl+Enter</b> - отправить</small></p>					<div id="count-word">400</div>					<p align="right" style="padding:5px;margin-top:0;"><input type="button" name="addmess" class="recall-button addmess" value="Отправить"></p>					</div>';				}			} else {				$privat_block .= 'Вы не можете писать пользователям, которые находятся в черном списке';			}						$num=0;			$privat_block .= '<div class="new_mess"></div>';			foreach((array)$private_messages as $message){				$num++;										$privat_block = $this->get_private_message_block_rcl($privat_block,$message);									if($num==10) break;					}				if($num_mess>$num) $privat_block .= '<div class="old_mess_block"><a href="#" class="old_message">Показать более поздние сообщения</a></div>';			if(!$rcl_options['update_private_message']) $rcl_options['update_private_message'] = 10;			$sec_update = 1000*$rcl_options['update_private_message'];					$privat_block .= "<script type='text/javascript'>				var old_num_mess = ".$num_mess."; var block_mess = 1; var user_old_mess = ".$this->user_lk."; var update_mass_ID; var max_sec_update_rcl=0;								function update_mass(){";					if($rcl_options['max_request_new_message']>0)$privat_block .= "					max_sec_update_rcl++; if(max_sec_update_rcl>".$rcl_options['max_request_new_message'].") return false;					";					$privat_block .= "jQuery.post('".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/message/check-message.php?lk='+user_old_mess+'&user=".$user_ID."', function(check){					if (check) {						jQuery(function(){													var ar_check = check;							ar_check.split('|');							if(ar_check[2]==0){								jQuery('.mess_status').remove();							}							//alert(ar_check[1]);							if(ar_check[0]==0) return false;																					var dataString_new_mess = 'action=update_message_history_recall&user='+user_old_mess;								jQuery.ajax({							type: 'POST',							data: dataString_new_mess,							dataType: 'json',							url: '".get_bloginfo('wpurl')."/wp-admin/admin-ajax.php',							success: function(data){								if(data['recall']==100){									jQuery('.new_mess').replaceWith(data['message_block']);									jQuery.ionSound.play('water_droplet');									max_sec_update_rcl = 0;								}								if(data['read']==200){															jQuery('.mess_status').remove();															}							} 							});	  								return false;								});					}					});									update_mass_ID = setTimeout('update_mass()', ".$sec_update.");      				}								window.onload=function(){					update_mass();				}									</script>";		}		return $privat_block;	}	function get_interval_contacts_rcl(){		global $wpdb,$user_ID;		if(!$user_ID) exit;		$days = $_POST['days'];				if($days<0){			$contacts = $wpdb->get_col("SELECT ban FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID'");		}else{			$contacts = $wpdb->get_col("SELECT contact FROM ".RCL_PREF."private_contacts WHERE user = '$user_ID' AND status = '1'");							}				$privat_block = $this->get_loop_contacts_rcl($contacts,$days);				$log['message_block'] = $privat_block;		$log['recall']=100;		echo json_encode($log);		exit;					}		function get_loop_contacts_rcl($contacts,$days){		global $wpdb,$user_ID;		$interval = $days*24*3600;				if($days>0) $sql_int = "AND time_mess > (NOW() - INTERVAL $interval SECOND)";		foreach((array)$contacts as $contact){			if(++$a>1)$cntctslist .= ',';			$cntctslist .= $contact;		}		$rcl_action_users = $wpdb->get_results("SELECT user,time_action FROM ".RCL_PREF."user_action WHERE user IN ($cntctslist)");		if($days>=0){			$su_list  = $wpdb->get_results("			SELECT author_mess,time_mess,adressat_mess,status_mess FROM (			SELECT * FROM ".RCL_PREF."private_message WHERE adressat_mess IN ($cntctslist) AND author_mess = '$user_ID' $sql_int 			OR author_mess IN ($cntctslist) AND adressat_mess = '$user_ID' $sql_int ORDER BY time_mess DESC			) TBL GROUP BY author_mess,adressat_mess");						foreach((array)$su_list as $s){$list[] = (array)$s;}			$list = array_multisort_key_rcl((array)$list, 'time_mess', SORT_ASC);			foreach((array)$list as $l){				if($l['author_mess']!=$user_ID) $s_contact=$l['author_mess'];				if($l['adressat_mess']!=$user_ID) $s_contact=$l['adressat_mess'];				$contact_list[$s_contact]['time'] = $l['time_mess'];				$contact_list[$s_contact]['contact'] = $s_contact;				$contact_list[$s_contact]['status'] = $l['status_mess'];								}			$contact_list = array_multisort_key_rcl((array)$contact_list, 'time', SORT_DESC);				}else{						foreach((array)$contacts as $c){				$contact_list[]['contact'] = $c;			}					}				$name_users = $wpdb->get_results("SELECT ID,display_name FROM ".$wpdb->prefix."users WHERE ID IN ($cntctslist)");					foreach((array)$name_users as $name){							$names[$name->ID] = $name->display_name;		}											foreach((array)$contact_list as $data){					if(!$names[$data['contact']]) continue;						foreach((array)$rcl_action_users as $action){				if($action->user==$data['contact']){$time_action = $action->time_action; break;}			}			$last_action = last_user_action_recall($time_action);			$privat_block .= '<div class="single_correspond history-'.$data['contact'];			if($data['status']==0) $privat_block .= ' redline';			$privat_block .= '">';			$privat_block .= '<div style="float:right;">';			if(!$last_action)				$privat_block .= '<div class="status_author_mess" style="background:url(\'/wp-content/plugins/recall/img/minionline.gif\') no-repeat;"></div>';			else				$privat_block .= '<div class="status_author_mess" style="background:url(\'/wp-content/plugins/recall/img/minioffline.gif\') no-repeat;"></div>';			$redirect_url = get_redirect_url_rcl(get_author_posts_url($data['contact']),'privat');								$privat_block .= get_avatar($data['contact'], 40).'<input type="button" class="recall-button ';						if($days>0) $privat_block .= 'del_history';			else $privat_block .= 'remove_ban_list';						$privat_block .='" id="'.$data['contact'].'" value="Удалить">			</div>			<p style="font-size: 16px;">			Переписка с пользователем <a href="'.$redirect_url.'">'.$names[$data['contact']].'</a>';			if(isset($data['time'])) $privat_block .='<br/><small>Последнее сообщение: '.$data['time'].'</small>';			else $privat_block .='<br/><small>История переписки отсутствует</small>';			$privat_block .='</p></div>';		}					return $privat_block;	}	function get_delete_private_mess_rcl($message){		global $user_ID;		if($message->status_mess==0&&$message->author_mess==$user_ID){			$button = '<a class="mess_status" href="'.wp_nonce_url( get_bloginfo('wpurl').'/?id_mess='.$message->ID.'&user_id='.$this->user_lk.'&delete_private_message_recall=true', $user_ID ).'">Удалить</a>';			}		return $button;	}	function get_private_message_block_rcl($privat_block,$message){	global $user_ID,$wpdb;				$privat_block .= $this->get_delete_private_mess_rcl($message);		$privat_block = $this->get_content_private_message_rcl($message,$privat_block);							if($message->author_mess==$this->user_lk){			if($message->status_mess==0) $new_st = 1;			if($message->status_mess==4) $new_st = 5;			if($new_st==1||$new_st==5) $wpdb->update( RCL_PREF.'private_message',array( 'status_mess' => $new_st ),array( 'ID' => $message->ID ));		}				return $privat_block;	}	function get_content_private_message_rcl($message,$privat_block){		if($message->author_mess == $this->user_lk){								$avatar_mess = $this->ava_user_lk;			$class="you";			if($message->status_mess==6) $class="file";		}else{ 			$avatar_mess = $this->ava_user_ID;			$class="im";			if($message->status_mess==4||$message->status_mess==5) $class="file";			if($message->status_mess==6){				$avatar_mess = $this->ava_user_lk;				$class="you";			}		}		$content_message = $this->mess_preg_replace_rcl($message->content_mess);							$content_message = $this->get_url_file_message($message,$content_message);		$privat_block .= '<div class="public-post message-block '.$class.'">';						if($class!="file")$privat_block .= '<div class="author-avatar">'.$avatar_mess.'</div>';						$privat_block .= '<div class="content-mess">			<p style="margin-bottom:0px;" class="time-message">				<span class="time">'.$message->time_mess.'</span>			</p>';		if($class!="file")$privat_block .= '<span class="privat-balloon"></span>';		$privat_block .= '<div class="balloon-message"><p>'.$content_message.'</p></div>		</div>';		$privat_block .= '</div>';		return 	$privat_block;			}	//Отмечаем входящее сообщение как прочтенное	function old_status_message_recall(){		global $wpdb;		global $user_ID;				if(!$user_ID)return false;					$id_mess = $_POST['id_mess'];		$author_mess = $_POST['author_mess'];					$result = $wpdb->update( RCL_PREF.'private_message',			array( 'status_mess' => 1 ),			array( 'author_mess' => "$author_mess", 'adressat_mess' => $user_ID, 'status_mess'=>0)			);					if ($result){			wp_redirect( get_redirect_url_rcl(get_author_posts_url($author_mess),'privat')); exit;					}else{			wp_die('Ошибка изменения статуса сообщения');		}				}	function old_status_message_recall_activate ( ) {		if ( isset( $_POST['old_status_message_recall'] ) ) add_action( 'wp', array(&$this, 'old_status_message_recall'));	}		//Удаление непрочтенного сообщения из переписки	function delete_private_message_recall(){	global $wpdb,$user_ID;		if ( !isset( $_GET['delete_private_message_recall'] ) ) return false;		if( !wp_verify_nonce( $_GET['_wpnonce'], $user_ID ) ) wp_die('Error');		$user_id = $_GET['user_id']; $id_mess = $_GET['id_mess'];			$result = $wpdb->query("DELETE FROM ".RCL_PREF."private_message WHERE ID = '$id_mess'");		if (!$result) wp_die('Error');					wp_redirect( get_redirect_url_rcl(get_author_posts_url($user_id),'privat') );  exit;	}		//Удаляем из черного списка	function delete_blacklist_user_recall(){		global $wpdb;		global $user_ID;		if($user_ID){			//$idbanlist = $_POST['idbanlist'];			$ban_user = $_POST['ban_user'];			$result = $wpdb->query("DELETE FROM ".RCL_PREF."black_list_user WHERE user = '$user_ID' AND ban = '$ban_user'");						do_action('rcl_delete_user_blacklist',$ban_user,$user_ID);			if ($result) {				wp_redirect( get_author_posts_url($ban_user) );  exit;						} else {			  wp_die('Error');			}		}					}	function delete_blacklist_user_recall_activate ( ) {	  if ( isset( $_POST['remove_black_list'] ) ) {		add_action( 'wp', array(&$this, 'delete_blacklist_user_recall'));	  }	}		/*************************************************	Добавление личного сообщения	*************************************************/	function add_private_message_recall(){		global $user_ID,$wpdb,$rcl_user_URL;		if(!$user_ID) exit;			rcl_update_timeaction_user();								$_POST = stripslashes_deep( $_POST );  			$this->user_lk = $_POST['adressat_mess'];					$content_mess = esc_textarea($_POST['content_mess']);				$online = $_POST['online'];				$status_mess = 0;			$time = current_time('mysql');						$content_mess = apply_filters('rcl_pre_save_private_message',$content_mess);						$result = $wpdb->insert(				RCL_PREF.'private_message',					array( 					'author_mess' => $user_ID, 					'content_mess' => $content_mess, 					'adressat_mess' => $this->user_lk,					'time_mess' => $time, 					'status_mess' => $status_mess				)			);						$id_mess = $wpdb->get_var("SELECT ID FROM ".RCL_PREF."private_message WHERE author_mess = '$user_ID' AND time_mess = '$time'");					$status = $wpdb->get_var("SELECT status FROM ".RCL_PREF."private_contacts WHERE user = '$user_ID' AND contact = '$this->user_lk'");			if(!$status){				$wpdb->insert(					RCL_PREF.'private_contacts',						array( 						'user' => "$user_ID", 						'contact' => $this->user_lk, 						'status' => 1 					)				);				$wpdb->insert(					RCL_PREF.'private_contacts',						array( 						'user' => $this->user_lk, 						'contact' => "$user_ID", 						'status' => 1 					)				);			}			if($status==3){				$wpdb->update( 					RCL_PREF.'private_contacts',						array( 'status' => 1 ), 						array( 'user' => "$user_ID", 'contact' => $this->user_lk )					);				$wpdb->update( 					RCL_PREF.'private_contacts',						array( 'status' => 1 ), 						array( 'user' => $this->user_lk, 'contact' => "$user_ID" )					);			}			if ($result) {				if($online == 0){					add_filter('wp_mail_content_type',create_function('', 'return "text/html";'));					$headers = 'From: '.get_option('blogname').' <noreaply@'.$_SERVER['HTTP_HOST'].'>' . "\r\n";					$title = 'Личное сообщение';					$to = get_the_author_meta('user_email',$this->user_lk);					$mess = '					<p>Вам было отправлено личное сообщение</p>					<p>от пользователя '.get_the_author_meta('display_name',$user_ID).'</p>					<p>Вы можете прочитать сообщение, перейдя по ссылке:</p>					<p>'.get_redirect_url_rcl(get_author_posts_url($user_ID),'privat').'</p>					<p>Это письмо было создано автоматически, не надо отвечать на него.	</p>					<p>-------------------------------</p>					<p>'.get_option('blogname').'</p>';					$from='noreaply@'.$_SERVER['HTTP_HOST'];					wp_mail($to, $title, $mess, $headers);													}								if($_POST['widget']!='undefined'){					$wpdb->update( 						RCL_PREF.'private_message',						array( 'status_mess' => 1 ), 						array( 'ID' => $_POST['widget'] )					);					$message_block = '<p class="success-mess">Ваше сообщение отправлено!</p>';					$log['recall']=200;				}else{					$content_message = $this->str_nl2br_rcl($content_mess);										$message_block = '<div class="new_mess"></div>';					$message = array('content_mess'=>$content_message,'status_mess'=>0,'author_mess'=>$user_ID,'time_mess'=>$time);					$this->ava_user_lk = '';					$this->ava_user_ID = get_avatar($user_ID, 40);					$message_block = $this->get_private_message_block_rcl($message_block,(object)$message);					$log['recall']=100;				}											$log['message_block']=$message_block;			}else{				$log['recall']=120;					}						echo json_encode($log);			exit;	}	/*************************************************	Удаление истории переписки	*************************************************/		function delete_history_private_recall(){		global $wpdb,$user_ID;		if($user_ID){			$this->user_lk = $_POST['id_user'];					$status = $wpdb->get_var("SELECT status FROM ".RCL_PREF."private_contacts WHERE user='$this->user_lk' AND contact='$user_ID'");			if($status==3){				//Если собеседник тоже удалил пользователя из контактов, то удаляем всю переписку между ними, тк она им не нужна				$wpdb->query("DELETE FROM ".RCL_PREF."private_contacts 				WHERE user='$user_ID' AND contact='$this->user_lk' 				OR user='$this->user_lk' AND contact='$user_ID'");				$wpdb->query("DELETE FROM ".RCL_PREF."private_message 				WHERE author_mess='$user_ID' AND adressat_mess='$this->user_lk' 				OR author_mess='$this->user_lk' AND adressat_mess='$user_ID'");			}else{				$res = $wpdb->update( 					RCL_PREF.'private_contacts',						array( 'status' => 3 ), 						array( 'user' => "$user_ID", 'contact' => "$this->user_lk" )					);			}			$log['id_user']=$this->user_lk;			$log['otvet']=100;		} else{			$log['otvet']=1;		}		echo json_encode($log);		exit;	}		/*************************************************	Удаление из черного списка	*************************************************/		function remove_ban_list_rcl(){		global $wpdb,$user_ID;		if($user_ID){			$this->user_lk = $_POST['id_user'];					$id_ban = $wpdb->get_var("SELECT ID FROM ".RCL_PREF."black_list_user WHERE user='$user_ID' AND ban='$this->user_lk'");			if($id_ban){							$wpdb->query("DELETE FROM ".RCL_PREF."black_list_user WHERE ID='$id_ban'");						}			$log['id_user']=$this->user_lk;			$log['otvet']=100;		} else{			$log['otvet']=1;		}		echo json_encode($log);		exit;	}		/*************************************************	Отмечаем сообщение как прочтенное	*************************************************/		function close_new_message_recall(){		global $wpdb;		global $user_ID;				if($user_ID){			$wpdb->update( 				RCL_PREF.'private_message',				array( 'status_mess' => 1 ), 				array( 'ID' => $_POST['id_mess'] )			);			$log['message_block'] = '<p class="success-mess">Сообщение отмечено как прочтенное</p>';			$log['recall']=100;		}		echo json_encode($log);		exit;	}		/*************************************************	Добавление в черный список	*************************************************/		function add_blacklist_recall(){		global $wpdb,$user_ID;				if(!$user_ID) exit;				$this->user_lk = $_POST['add_id_user'];				$result = $wpdb->insert(RCL_PREF.'black_list_user',				array( 'user' => "$user_ID", 'ban' => "$this->user_lk" )		);				do_action('rcl_add_user_blacklist',$this->user_lk,$user_ID);		if ($result) $log['otvet']=100;				else $log['otvet']=1;				echo json_encode($log);		exit;	}		/*************************************************	Обновление истории переписки на странице собеседника	*************************************************/	function update_message_history_recall(){		global $user_ID;		global $wpdb;				$this->user_lk = $_POST['user'];		if($user_ID){							$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message 				WHERE author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess = '0' 				OR author_mess = '$this->user_lk' AND adressat_mess = '$user_ID' AND status_mess = '4'				ORDER BY id DESC");									$message_block .= '<div class="new_mess"></div>';					foreach((array)$private_messages as $message){											$content_message = $this->mess_preg_replace_rcl($message->content_mess);											$content_message = $this->str_nl2br_rcl($content_mess);												$content_mess = apply_filters('rcl_get_new_private_message',$content_mess,$this->user_lk,$user_ID);												$message_block .= $this->get_delete_private_mess_rcl($message);												$this->ava_user_lk = get_avatar($message->author_mess, 40);						$this->ava_user_ID = $this->ava_user_lk;						$message_block = $this->get_content_private_message_rcl((object)$message,$message_block);													if($message->author_mess==$this->user_lk){							if($message->status_mess==0) $new_st = 1;							if($message->status_mess==4) $new_st = 5;							if($new_st==1||$new_st==5) $wpdb->update( RCL_PREF.'private_message',array( 'status_mess' => $new_st ),array( 'ID' => $message->ID )	);							$log['delete']=200;						}												}										$log['recall']=100;									$log['message_block']=$message_block;			//}else{				//$log['recall']=0;						//}						$no_read_mess = $wpdb->get_var("SELECT COUNT(ID) FROM ".RCL_PREF."private_message 			WHERE author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess = '0' 			OR author_mess = '$user_ID' AND adressat_mess = '$this->user_lk' AND status_mess = '4'");				if($no_read_mess==0){					$log['read']=200;				}				}		echo json_encode($log);			exit;	}		/*************************************************	Запрос на получение новых сообщений на сайте	*************************************************/	function get_new_outside_message_recall(){		global $user_ID;		global $wpdb;		if(!$user_ID) return false;						$mess = $wpdb->get_row("SELECT * FROM ".RCL_PREF."private_message WHERE adressat_mess = '$user_ID' AND status_mess ='0'");					if(!$mess){			$log['recall']=0;								echo json_encode($log);				exit;		}					//if( is_author($mess->author_mess) ) return false;		$wpurl = get_wpurl();		$message_block .= '<div id="privatemess">				<p class="title-new-mess">Вам новое сообщение!</p>				<div id="'.$mess->ID.'" class="close-mess-window"><img src="'.$wpurl.'/wp-content/plugins/recall/img/miniclose.png'.'"></div>';		$rcl_action_users = $wpdb->get_row("SELECT * FROM ".RCL_PREF."user_action WHERE user = '$mess->author_mess'");		$last_action = last_user_action_recall($rcl_action_users->time_action);						$message_block .= '<div class="private-message">';				if(!$last_action){					$message_block .= '<div class="mini_status_user" style="background:url('.$wpurl.'/wp-content/plugins/recall/img/minionline.gif) no-repeat;"></div>';			$online = 1;					}else{					$message_block .= '<div class="mini_status_user" style="background:url('.$wpurl.'/wp-content/plugins/recall/img/minioffline.gif) no-repeat;"></div>';			$online = 0;		}				$message_block .= '<div style="float:left;margin:0 10px 0 0;">'.get_avatar($mess->author_mess,60).'</div>				<p class="name-author-mess">Отправитель: '.get_the_author_meta('display_name', $mess->author_mess).'</p>				<p class="content-mess">'.$mess->content_mess.'</p>				<p style="float:right;"><input type="button" name="view-form" class="recall-button view-form recall-button" value="Ответить"></p>				<div class="prmess">				<textarea name="content_mess" id="minicontent_mess" rows="3" style="width:98%;padding:5px;"></textarea>				<input type="hidden" name="adressat_mess" id="miniadressat_mess" value="'.$mess->author_mess.'">				<input type="hidden" name="online" id="minionline" value="'.$online.'">				<input type="hidden" name="widget-mess" id="widget-mess" value="'.$mess->ID.'">				<p align="right" style="margin:0;"><small><b>Enter</b> - отправить, <b>Ctrl+Enter</b> - перенос строки</small></p>				<div id="minicount-word">400</div>				<p align="right" style="float: right;margin-top: 0;"><input type="button" name="addmess recall-button" class="miniaddmess recall-button" value="Отправить"></p>				</div>				<form class="form_new_message" action="" method="post">				<input type="hidden" name="id_mess" value="'.$mess->ID.'">				<input type="hidden" name="author_mess" value="'.$mess->author_mess.'">				<p align="left"><input class="reading_mess  recall-button" type="submit" name="old_status_message_recall" value="Перейти к переписке"></p>				</form>				</div></div>';						$log['recall']=100;						$log['message_block']=$message_block;					echo json_encode($log);			exit;	}		/*************************************************	Получаем старые сообщения из истории переписки	*************************************************/	function get_old_private_message_recall(){		global $user_ID;		global $wpdb;				$private_messages = $wpdb->get_results("SELECT * FROM ".RCL_PREF."private_message ORDER BY id DESC");		$old_num_mess = $_POST['old_num_mess'];		$this->user_lk = $_POST['user'];		$block_mess = $_POST['block_mess'];		$post_mess = 10;		$block_mess = $block_mess*$post_mess;		if($user_ID){			$num_mess = 0;			foreach((array)$private_messages as $message){				if($message->author_mess==$user_ID&&$message->adressat_mess==$this->user_lk||$message->author_mess==$this->user_lk&&$message->adressat_mess==$user_ID){					$num_mess++;				}							}			$num=0;			if($num_mess>$old_num_mess) {				$new_mess = $num_mess - $old_num_mess;				$block_mess = $block_mess + $new_mess;			}						foreach((array)$private_messages as $message){				if($message->author_mess==$user_ID&&$message->adressat_mess==$this->user_lk||$message->author_mess==$this->user_lk&&$message->adressat_mess==$user_ID){					$num++;					if(($block_mess-$post_mess)<$num){						$content_message = $this->mess_preg_replace_rcl($message->content_mess);											$content_message = $this->str_nl2br_rcl($content_mess);						$this->ava_user_lk = get_avatar($message->author_mess, 40);						$this->ava_user_ID = $this->ava_user_lk;						$message_block = $this->get_private_message_block_rcl($message_block,(object)$message);												if($num==$block_mess)break;					}				}			} 			if($num_mess>$num) $message_block .= '<div class="old_mess_block"><a href="#" class="old_message">Показать более поздние сообщения</a></div>';			$log['recall']=100;			$log['message_block']=$message_block;			$log['num_mess_now']=$num_mess;		}		echo json_encode($log);				exit;	}		function get_shortcode_chat($atts,$content=null){			extract(shortcode_atts(array('room'=>false),$atts));		$this->room = $room;		return $rcl_message->get_private_message_content(0, 1, $room);	}		function get_url_file_message($mess,$content){		global $user_ID;		if($mess->status_mess==6) return 'Файл был загружен.';		if($mess->status_mess==4||$mess->status_mess==5){			if($mess->author_mess==$user_ID&&$mess->status_mess==5) return 'Файл был получен, но еще не загружен.';			if($mess->author_mess==$user_ID&&$mess->status_mess==4) return 'Файл был отправлен получателю.';			$content = wp_nonce_url(get_bloginfo('wpurl').'/wp-content/plugins/recall/add-on/message/download.php?fileid='.$mess->ID, 'user-'.$user_ID );			$short_url = substr($content, 0, 25)."...".substr($content, -15);			$content = 'Ссылка на пересылаемый файл: <br><a class="link-file-rcl" target="_blank" href="'.$content.'">'.$short_url.'</a><br> <small>(принимайте файлы только от доверенных источников)</small>';		}		return $content;	}		function str_nl2br_rcl($content){		$content_message = str_replace("\'","'",$content);		$content_message = str_replace('\"','"',$content_message);		$content_message = nl2br($content_message);		return $content_message;	}	function get_footer_scripts_privat_rcl($script){		global $rcl_options;		if($rcl_options['file_exchange_weight']) $weight = $rcl_options['file_exchange_weight'];		else $weight = '2';				$url = "url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/message/upload-file.php',";				$OnComplete = "onComplete:function(evt, uiEvt){				var result = uiEvt.result;				if(result['recall']==100){					var text = 'Файл был успешно отправлен.';								}				if(result['recall']==150){					var text = 'Вы превысили лимит на количество отправляемых файлов. Дождитесь пока файлы отправленные ранее будут приняты.';								}				jQuery('.new_mess').replaceWith('<div class=\"new_mess\"></div><div class=\"public-post message-block file\"><div class=\"content-mess\"><p style=\"margin-bottom:0px;\" class=\"time-message\"><span class=\"time\">'+result['time']+'</span></p><p class=\"balloon-message\">'+text+'</p></div></div>');			}";		$script .= "				jQuery('.link-file-rcl').live('click',function(){			jQuery(this).parent().text('Удаляю файл с сервера');		});		var talker = jQuery('input[name=\"adressat_mess\"]').val();		var online = jQuery('input[name=\"online\"]').val();		jQuery('#dnd').fileapi({		   ".$url."		   paramName: 'filedata',		   maxSize: ".$weight." * FileAPI.MB,		   data:{talker:talker,online:online},		   autoUpload: true,		   clearOnComplete:true,		   elements: {			  list: '.js-files',			  file: {				 tpl: '.js-file-tpl',				 preview: {					el: '.b-thumb__preview',					width: 80,					height: 80				 },				 upload: { show: '.progress' },				 complete: { hide: '.progress' },				 progress: '.progress .bar'			  },			  dnd: {				 el: '.b-upload__dnd',				 hover: 'b-upload__dnd_hover',				 fallback: '.b-upload__dnd-not-supported'			  }		   },			".$OnComplete."		});		jQuery('#simple-btn').fileapi({		   ".$url."		   paramName: 'filedata',		   maxSize: ".$weight." * FileAPI.MB,		   data:{talker:talker,online:online},		   autoUpload: true,		   elements: {			  size: '.js-size',			  active: { show: '.js-upload', hide: '.js-browse' },			  progress: '.js-progress'		   },		   onSelect: function (evt, data){				data.all; 				data.files; 				if( data.other.length ){									var errors = data.other[0].errors;					if( errors ){						if(errors.maxSize) alert('Превышен допустимый размер файла.\nОдин файл не более ".$weight."MB');					}				}			},			".$OnComplete."		});";		return $script;	}		function get_scripts_message_rcl($script){				$ajaxdata = "type: 'POST', data: dataString, dataType: 'json', url: '".get_bloginfo('wpurl')."/wp-admin/admin-ajax.php',";		$ajaxfile = "type: 'POST', data: dataString, dataType: 'json', url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/message/ajax-request.php',";					$script .= "			jQuery('.view-form').live('click',function(){							jQuery('#privatemess .prmess').slideDown();					jQuery('.view-form').slideUp();							return false;			});						jQuery('.delete_old_message').delay(60000).fadeOut();						function count_word_in_message(word){						var count = 400 - word.val().length;				return count;					}						function get_color_count_word(count){				var color;				if(count>150) color = 'green';				if(count<150) color = 'orange';					if(count<50) color = 'red';				return color;			}						jQuery('#content_mess').keyup( function(){				var word = jQuery(this);				count = count_word_in_message(word);				color = get_color_count_word(count);				jQuery('#count-word').css('color', color).text(count);								if(word.val().length > 399)				word.val(word.val().substr(0, 399));			});						jQuery('#minicontent_mess').live('keyup', function(){				var word = jQuery(this);				count = count_word_in_message(word);				color = get_color_count_word(count);				jQuery('#minicount-word').css('color', color).text(count);								if(word.val().length > 399)				word.val(word.val().substr(0, 399));			});						jQuery.ionSound({				sounds: ['e-oh','water_droplet'],				path: '/wp-content/plugins/recall/add-on/message/sounds/',				multiPlay: false,				volume: '0.5'			});		/* Добавление личного сообщения */					function add_private_message_recall(){				var content_mess = encodeURIComponent(jQuery('#content_mess').attr('value'));				var widget = jQuery('#widget-mess').attr('value');				var adressat_mess = jQuery('#adressat_mess').attr('value');				var online = jQuery('#online').attr('value');				max_sec_update_rcl = 0;				jQuery('#content_mess').attr('value', '');				if(content_mess)					var dataString = 'action=add_private_message_recall&content_mess='+content_mess+'&adressat_mess='+adressat_mess+'&online='+online+'&widget='+widget+'&user_ID='+user_ID;				else					return false;				jQuery.ajax({					".$ajaxdata."					success: function(data){						if(data['recall']==100){													jQuery('.new_mess').replaceWith(data['message_block']);							}						if(data['recall']==200){							jQuery('#privatemess').html(data['message_block']).fadeOut(5000);											}					} 				});	  					return false;			}			jQuery('.addmess').live('click',function(){			var content_text = jQuery('#content_mess').val();			if(content_text)				add_private_message_recall();			});						ctrl = false;			function breakText() {			  var caret = jQuery('#content_mess').getSelection().start;			  jQuery('#content_mess').insertText('".'\r\n'."', caret, false).setSelection(caret+1, caret+1);			}		 			jQuery('#content_mess').keydown(function(event){			  switch (event.which) {				case 13: return false;				case 17: ctrl = true;			  }			});						jQuery('#content_mess').keyup(function(event){			var content_text = jQuery('#content_mess').val();			  switch (event.which) {				case 13:				  if (ctrl){				  if(content_text)					add_private_message_recall();					return false;				  }				  breakText();				break;				case 17: ctrl = false;			  }          			});						function add_private_minimessage_recall(){				var content_mess = jQuery('#minicontent_mess').attr('value');				var widget = jQuery('#widget-mess').attr('value');				var adressat_mess = jQuery('#miniadressat_mess').attr('value');				var online = jQuery('#minionline').attr('value');				if(content_mess)					var dataString = 'action=add_private_message_recall&content_mess='+content_mess+'&adressat_mess='+adressat_mess+'&online='+online+'&widget='+widget+'&user_ID='+user_ID;				else					return false;				jQuery.ajax({					".$ajaxdata."					success: function(data){						if(data['recall']==200){							jQuery('#privatemess').html(data['message_block']).fadeOut(5000);							jQuery('#rcl-new-mess').delay(2000).queue(function () {jQuery('#rcl-new-mess').empty();jQuery('#rcl-new-mess').dequeue();});						}					} 				});	  					return false;			}			jQuery('.miniaddmess').live('click',function(){			var content_text = jQuery('#minicontent_mess').val();			if(content_text)				add_private_minimessage_recall();			});						ctrl = false;			function minibreakText() {			  var caret = jQuery('#minicontent_mess').getSelection().start;			  jQuery('#minicontent_mess').insertText('".'\r\n'."', caret, false).setSelection(caret+1, caret+1);			}		 			jQuery('#minicontent_mess').keydown(function(event){			  switch (event.which) {				case 13: return false;				case 17: ctrl = true;			  }			});						jQuery('#minicontent_mess').live('keyup',function(event){			var content_text = jQuery('#minicontent_mess').val();			  switch (event.which) {				case 13:				  if (!ctrl){				  if(content_text)					add_private_minimessage_recall();					return false;				  }				  minibreakText();				break;				case 17: ctrl = false;			  }          			});		/* Отмечаем сообщение как прочтенное */				jQuery('.close-mess-window').live('click',function(){				var id_mess = parseInt(jQuery(this).attr('id').replace(/\D+/g,''));				var dataString = 'action=close_new_message_recall&id_mess='+id_mess+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('#privatemess').html(data['message_block']).fadeOut(5000);							jQuery('#rcl-new-mess').delay(2000).queue(function () {jQuery('#rcl-new-mess').empty();jQuery('#rcl-new-mess').dequeue();});						} else {							alert('Error');						}					} 				});							return false;			});		/* Добавление в черный список */				jQuery('#add_black_list').live('click',function(){				var add = jQuery(this);				var add_list = add.attr('name');				var dataString = 'action=add_blacklist_recall&add_id_user='+add_list+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['otvet']==100){							jQuery('#add_black_list_button>input').replaceWith('<p style=\'border:1px solid #ccc;padding:5px;text-align:center;\'>Пользователь<br />добавлен в<br />черный список</p>');						} else {							alert('Error');						}					} 				});							return false;			});		/* Удаление истории переписки */			jQuery('.del_history').live('click',function(){				var id_user = jQuery(this).attr('id');				var dataString = 'action=delete_history_private_recall&id_user='+id_user+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['otvet']==100){							 jQuery('.history-'+data['id_user']).remove();						} else {							alert('Ошибка удаления!');						}					} 				});	  					return false;			});		jQuery('.remove_ban_list').live('click',function(){				var id_user = jQuery(this).attr('id');				var dataString = 'action=remove_ban_list_rcl&id_user='+id_user+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['otvet']==100){							 jQuery('.history-'+data['id_user']).remove();						} else {							alert('Ошибка удаления!');						}					} 				});	  					return false;			});		/* Получаем старые сообщения в переписке */				jQuery('.old_message').live('click',function(){				block_mess++;				var dataString = 'action=get_old_private_message_recall&block_mess='+block_mess+'&old_num_mess='+old_num_mess+'&user='+user_old_mess+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('.old_mess_block').replaceWith(data['message_block']);							old_num_mess = data['num_mess_now'];						}					} 				});	  					return false;			});		jQuery('.correspond .sec_block_button').live('click',function(){				if(jQuery(this).hasClass('active'))return false;				var days = jQuery(this).attr('data');				jQuery('.correspond .sec_block_button').removeClass('active');				jQuery(this).addClass('active');				var dataString = 'action=get_interval_contacts_rcl&days='+days+'&user_ID='+user_ID;				jQuery.ajax({					".$ajaxfile."					success: function(data){						if(data['recall']==100){							jQuery('.correspond #contact-lists').html(data['message_block']);												} else {							alert('Error');						}					} 				});							return false;			});		";		return $script;	}}$rcl_message = new rcl_message();?>