<?phpadd_action('admin_menu', 'profile_options_page_rcl',30);function profile_options_page_rcl(){	add_submenu_page( 'manage-wprecall', 'Поля профиля', 'Поля профиля', 'manage_options', 'manage-userfield', 'recall_users_profile_edit');}add_filter('rcl_content_user','get_show_profile_fields_lk_rcl',8,2);function get_show_profile_fields_lk_rcl($content_lk,$author_lk){	$profile_fields = apply_filters('show_profile_fields_rcl',$profile_fields,$author_lk);	if($profile_fields) $content_lk .= $profile_fields;	return $content_lk;}//Обновляем профиль пользователяfunction edit_user_profil_recall(){	global $wpdb;	global $user_ID;	if( !wp_verify_nonce( $_POST['_wpnonce'], 'update-profile_' . $user_ID ) ) return false;	if ( defined('ABSPATH') ) {			require_once(ABSPATH . 'wp-admin/includes/user.php');	} else {			require_once('../wp-admin/includes/user.php');	}	require_once( ABSPATH . WPINC . '/registration.php' );		$redirect_url = get_redirect_url_rcl(get_author_posts_url($user_ID),'profile').'&updated=true';			$args = array('hide_empty'=>false);  	$allterms = get_terms('category', $args );	$get_fields = get_option( 'custom_profile_field' );	$get_fields = unserialize( $get_fields);				if($get_fields){						foreach((array)$get_fields as $custom_field){								$slug = str_replace('-','_',$custom_field['slug']);				if($custom_field['type']=='checkbox'){					$chek = explode('#',$custom_field['field_select']);					$count_field = count($chek);					for($a=0;$a<$count_field;$a++){						$slug_chek = $slug.'_'.$a;						if($_POST[$slug_chek]){							update_usermeta($user_ID, $slug_chek, $_POST[$slug_chek]);														}else{							if(get_usermeta($user_ID, $slug_chek, $_POST[$slug_chek])) delete_usermeta($user_ID, $slug_chek, $_POST[$slug_chek]);						}					}				}				if($_POST[$slug]){					update_usermeta($user_ID, $slug, $_POST[$slug]);												}else{					if(get_usermeta($user_ID, $slug, $_POST[$slug])) delete_usermeta($user_ID, $slug, $_POST[$slug]);				}			}		}				foreach((array)$allterms as $term){			if($_POST['user_category_subsc_'.$term->term_id]){ 				update_usermeta($user_ID,'user_category_subsc_'.$term->term_id, 1);			}else{				if(get_the_author_meta('user_category_subsc_'.$term->term_id, $user_ID)) delete_usermeta($user_ID,'user_category_subsc_'.$term->term_id);			}					}				check_admin_referer( 'update-profile_' . $user_ID );		$errors = edit_user( $user_ID );		if ( is_wp_error( $errors ) ) {			foreach ( $errors->get_error_messages() as $message )				$errmsg = "$message";           		}		if($errmsg) wp_die($errmsg);		do_action( 'personal_options_update', $user_ID );      		wp_redirect( $redirect_url );}			function edit_user_profil_recall_activate ( ) {  if ( isset( $_POST['submit_user_profil'] ) ) {	    add_action( 'wp', 'edit_user_profil_recall' );  }}add_action('init', 'edit_user_profil_recall_activate');//Удаляем аккаунт пользователяfunction delete_acc_user_recall(){	global $user_ID,$wpdb;	if( !wp_verify_nonce( $_POST['_wpnonce'], 'delete-user-' . $user_ID ) ) return false;	$wpdb->query("DELETE FROM ".RCL_PREF."user_action WHERE user ='$user_ID'");	$delete = wp_delete_account( $user_ID );	if($delete){		wp_die('Очень жаль, но ваш аккаунт был удален!');		echo '<a href="/">Вернуться на главную</a>';	}else{		wp_die('Удаление аккаунта не удалось! Вернитесь обратно и повторите попытку.');	}	}function delete_acc_user_recall_activate ( ) {  if ( isset( $_POST['delete_acc_user_recall'] ) ) {    add_action( 'wp', 'delete_acc_user_recall' );  }}add_action('init', 'delete_acc_user_recall_activate');add_filter('admin_options_wprecall','get_admin_profile_page_content');function get_admin_profile_page_content($content){	global $rcl_options;	$content .='<h2>Настройки профиля и аккаунта</h2>	<div id="options-'.get_key_addon_rcl(pathinfo(__FILE__)).'" class="wrap-recall-options">				<div class="option-block">			<h3>Профиль и аккаунт</h3>			<label>Название вкладки в ЛК</label>';				if(!$rcl_options['tab_profile']) $rcl_options['tab_profile'] = 'Профиль';				$content .='<input type="text" name="tab_profile" value="'.$rcl_options['tab_profile'].'" size="10">				<small>Впишите свою надпись на кнопке переключения вкладки в личном кабинете</small>			<label>Разрешить удалять пользователям свой аккаунт?</label>			<select name="delete_user_account" size="1">				<option value="">Нет</option>				<option value="1" '.selected($rcl_options['delete_user_account'],1,false).'>Да</option>			</select>			<label>Максимальный размер аватара, Mb</label>			<input type="text" name="avatar_weight" value="'.$rcl_options['avatar_weight'].'" size="30">			<small>Ограничить загрузку изображений в качестве аватарок данным значением в мегабайтах. По-умолчанию, 2мб</small>		</div>	</div>';	return $content;}add_filter('the_button_wprecall','get_wprecall_profile_button',10,2);function get_wprecall_profile_button($button,$author_lk){	global $user_ID, $rcl_options;;	if(!$button) $status = 'active';		if(!$rcl_options['tab_profile']) $rcl_options['tab_profile'] = 'Профиль';	if($user_ID==$author_lk) $button .= ' <a href="#" id="profile" class="block_button '.$status.'">'.$rcl_options['tab_profile'].'</a> ';	return $button;}add_filter('the_block_wprecall','recall_block_edit_user_profile',10,2);function recall_block_edit_user_profile($block_wprecall, $author_lk){	global $userdata, $errmsg, $user_ID, $rcl_options;	if($user_ID!=$author_lk) return $block_wprecall;	if(!$block_wprecall) $status = 'active';		$profile_block .= '<div class="profile_block recall_content_block '.$status.'">';//начало блока настроек профиля	do_action('show_user_profile', $userdata);		get_currentuserinfo();	$defolt_field = get_option( 'show_defolt_field' );	$defolt_field = explode(',',$defolt_field);	foreach((array)$defolt_field as $onefield){		switch($onefield){			case 'user_login': $select_login = 'checked="checked"'; break;			case 'first_name': $select_first = 'checked="checked"'; break;			case 'last_name': $select_last = 'checked="checked"'; break;			case 'nickname': $select_nickname = 'checked="checked"'; break;			case 'display_name': $select_display = 'checked="checked"'; break;			case 'email': $select_email = 'checked="checked"'; break;			case 'url': $select_url = 'checked="checked"'; break;			case 'description': $select_description = 'checked="checked"'; break;		}	}	$profile_block .= '<h3>Аватар пользователя</h3>';	$avatar_id = get_option('avatar_user_'.$user_ID);	if ( $avatar_id ){ 		$image_attributes = wp_get_attachment_image_src($avatar_id); 	}	$profile_block .= '<div id="userpic" class="userpic"';	if($image_attributes[0]) $profile_block .= 'style="background:url('.$image_attributes[0].')no-repeat center;"';	$profile_block .= '>	   <div class="js-preview userpic__preview"></div>		<div class="buttons-upload">			<div id="userpic-btn" class="btn btn-success js-fileapi-wrapper">			  <div class="js-browse">				 <span class="btn-txt">Загрузить с компьютера</span>				 <input name="filedata" type="file">			  </div>			  <div class="js-upload" style="display: none;">				 <div class="progress progress-success"><div class="js-progress bar"></div></div>				 <span class="btn-txt">загрузка</span>			  </div>		   </div>			<div id="webcam-btn" class="btn btn-success">			  <div class="js-webcam">				 <span class="btn-txt">Снимок с вебкамеры</span>			  </div>			  <div class="js-upload" style="display: none;">				 <div class="progress progress-success"><div class="js-progress bar"></div></div>				 <span class="btn-txt">загрузка</span>			  </div>		   </div>		</div>	</div>	<div id="webcam" class="webcam">	   <div class="js-preview webcam__preview"></div>	</div>		<div class="userpic-notice"></div>	<div id="popup" class="popup" style="display: none;">		<div class="popup__body"><div class="js-img"></div></div>		<div style="margin: 0 0 5px; text-align: center;">			<div class="js-upload btn btn_browse btn_browse_small">Загрузить</div>		</div>	</div>';	$profile_block .= '<h1 class="single dotted" style="margin:15px 0;clear:both;">Профиль пользователя '.$userdata->user_login.'</h1>       	<form name="profile" id="your-profile" action="" method="post">	'.wp_nonce_field( 'update-profile_' . $user_ID,'_wpnonce',true,false ).'	<input type="hidden" name="from" value="profile" />	<input type="hidden" name="checkuser_id" value="'.$user_ID.'" />	<table class="form-table">';		$access = 7;	if($rcl_options['consol_access_rcl']) $access = $rcl_options['consol_access_rcl'];		if($userdata->user_level >= $access){		$profile_block .= '<tr>			<th>				<span>Панель инструментов</span>			</th>			<td>				<label for="admin_bar_front">				<input id="admin_bar_front" '.checked('true',$userdata->show_admin_bar_front,false).' type="checkbox" value="1" name="admin_bar_front">				Показывать административную панель при просмотре сайта				</label>			</td>		</tr>';	}		if($select_login){		$profile_block .= '<tr>		<th><label for="user_login">Логин:</label></th>		<td><input type="text" name="user_login" class="regular-text" id="user_login" value="'.esc_attr( $userdata->user_login ).'" maxlength="100" disabled /></td>		</tr>';	}	if($select_first){		$profile_block .= '<tr>		<th><label for="first_name">Имя:</label></th>		<td><input type="text" name="first_name" class="regular-text" id="first_name" value="'.esc_attr( $userdata->first_name ).'" maxlength="100" /></td>		</tr>';	}	if($select_last){		$profile_block .= '<tr>		<th><label for="last_name">Фамилия:</label></th>		<td><input type="text" name="last_name" class="regular-text" id="last_name" value="'.esc_attr( $userdata->last_name ).'" maxlength="100" /></td>		</tr>';	}	if($select_nickname){		$profile_block .= '<tr>		<th><label for="nickname">Ник:</label></th>		<td><input type="text" name="nickname" class="regular-text" id="nickname" value="'.esc_attr( $userdata->nickname ).'" maxlength="100" /></td>		</tr>';	}	if($select_display){		$profile_block .= '<tr>		<th><label for="display_name">Отображаемое имя:</label></th>		<td>		<select name="display_name" class="regular-dropdown" id="display_name">';									$public_display = array();			$public_display['display_displayname'] = esc_attr($userdata->display_name);			$public_display['display_nickname'] = esc_attr($userdata->nickname);			$public_display['display_username'] = esc_attr($userdata->user_login);			$public_display['display_firstname'] = esc_attr($userdata->first_name);			if($userdata->first_name&&$userdata->last_name) $public_display['display_firstlast'] = esc_attr($userdata->first_name) . '&nbsp;' . esc_attr($userdata->last_name);			if($userdata->first_name&&$userdata->last_name) $public_display['display_lastfirst'] = esc_attr($userdata->last_name) . '&nbsp;' . esc_attr($userdata->first_name);			$public_display = array_unique(array_filter(array_map('trim', $public_display)));			foreach((array)$public_display as $id => $item) { 				$profile_block .= '<option id="'.$id.'" value="'.esc_attr($item).'">'.esc_attr($item).'</option>';			} 			$profile_block .= '</select>		</td></tr>';	}			$profile_block .= '<tr>		<th><label for="email">Email:</label></th>		<td><input type="text" name="email" class="regular-text" id="email" required value="'.esc_attr($userdata->user_email).'" maxlength="100" /></td>		</tr>';		if($select_url){		$profile_block .= '<tr>		<th><label for="url">Свой сайт:</label></th>		<td><input type="text" name="url" class="regular-text" id="url" value="'.esc_url($userdata->user_url).'" maxlength="100" /></td>		</tr>';	}				$profile_block .= '<tr><th><label for="pass1">Новый пароль:</label></th>		<td><input type="password" name="pass1" class="regular-text" id="pass1" maxlength="50" value="" /><br/></td>		</tr><tr>		<th><label for="pass2">Пароль повторно:</label></th>		<td><input type="password" name="pass2" class="regular-text" id="pass2" maxlength="50" value="" /><br/></td>		</tr>';			if($select_description){		$profile_block .= '<tr>		<th><label for="description">Статус:</label></th>		<td><textarea name="description" class="regular-text" id="description" rows="3" cols="50">'.esc_textarea($userdata->description).'</textarea></td>					</tr>';	}				$get_fields = get_option( 'custom_profile_field' );	$get_fields = unserialize( $get_fields);				if($get_fields){						foreach((array)$get_fields as $custom_field){							$slug = str_replace('-','_',$custom_field['slug']);			if($custom_field['requared']==1) $req = 'required';			else $req = '';			$field .= '<tr><th><label>'.$custom_field['title'];			if($req) $field .= ' <span class="required">*</span>';			$field .= ':</label></th>';			if($custom_field['type']=='text')				$field .= '<td><input type="text" '.$req.' name="'.$slug.'" class="regular-text" id="'.$slug.'" maxlength="50" value="'.esc_textarea($userdata->$slug).'" /><br/></td>';			if($custom_field['type']=='textarea')				$field .= '<td><textarea '.$req.' name="'.$slug.'" class="regular-text" id="'.$slug.'" rows="5" cols="50">'.nl2br(esc_textarea($userdata->$slug)).'</textarea></td>';			if($custom_field['type']=='select'){				$fields = explode('#',$custom_field['field_select']);				$count_field = count($fields);				for($a=0;$a<$count_field;$a++){					$field_select .='<option value="'.$fields[$a].'" '.selected($userdata->$slug,$fields[$a],false).'>'.$fields[$a].'</option>';				}				$field .= '<td><select '.$req.' name="'.$slug.'" class="regular-text" id="'.$slug.'">				'.$field_select.'				</select></td>';			}			if($custom_field['type']=='checkbox'){				$chek = explode('#',$custom_field['field_select']);				$count_field = count($chek);				$field .='<td>';				for($a=0;$a<$count_field;$a++){					$slug_chek = $slug.'_'.$a;					$field .='<label><input '.$req.' type="checkbox" name="'.$slug_chek.'" class="regular-text" value="'.$chek[$a].'" '.checked($userdata->$slug_chek,$chek[$a],false).'> '.$chek[$a].'</label><br />';				}				$field .='</td>';			}			if($custom_field['type']=='radio'){				$radio = explode('#',$custom_field['field_select']);				$count_field = count($radio);				$field .='<td>';				for($a=0;$a<$count_field;$a++){					$field .='<label><input type="radio" name="'.$slug.'" class="regular-text" value="'.$radio[$a].'" '.checked($userdata->$slug,$radio[$a],false).'> '.$radio[$a].'</label><br />';				}				$field .='</td>';			}			$field .= '</tr>';						}		$profile_block .= $field;	}		$profile_block = apply_filters('profile_options_rcl',$profile_block,$userdata);		$profile_block .= '</table>';	if($rcl_options['feed_category_recall']==1){					$profile_block .= '<h2 style="margin:15px 0;">Мои подписки:</h2>';					if($rcl_options['id_feed_category']) $args = array('include' => $rcl_options['id_feed_category'],'hide_empty' => false);		else $args = array('hide_empty' => false);						$allterms = get_categories($args); 		$n=0;		$profile_block .= '<table style="width:100%;"><tr><td>';				foreach((array)$allterms as $term){			$n++;			$checked = '';			if($n>40){				$profile_block .= '</td><td>'; 				$n=1;			}						if(get_the_author_meta('user_category_subsc_'.$term->term_id, $user_ID)==1) $checked = 'checked=checked';						$profile_block .= '<label><input type="checkbox" name="user_category_subsc_'.$term->term_id.'" value="1" '.$checked.'>'.$term->cat_name.'</label><br />';		}				$profile_block .= '</td></tr></table>';				}		$profile_block .= '<br />				<p class="submit center">	<input type="hidden" name="action" value="update" />	<input type="hidden" name="user_id" id="user_id" value="'.$user_ID.'" />	<input type="hidden" name="admin_color" value="'.esc_attr( $userdata->admin_color ).'" />	<input type="hidden" name="rich_editing" value="'.esc_attr( $userdata->rich_editing ).'" />	<input type="hidden" name="comment_shortcuts" value="'.esc_attr( $userdata->comment_shortcuts ).'" />';				if ( !empty($userdata->admin_bar_front) ) {		$profile_block .= '<input type="hidden" name="admin_bar_front" value="'.esc_attr( $userdata->admin_bar_front ).'" />';	}				if ( !empty($userdata->admin_bar_admin) ) {		$profile_block .= '<input type="hidden" name="admin_bar_admin" value="'.esc_attr( $userdata->admin_bar_admin ).'" />';	}					$profile_block .= '<input type="submit" id="cpsubmit" class="recall-button" value="Обновить профиль" name="submit_user_profil" />	</p></form>';	if($rcl_options['delete_user_account']==1){		$profile_block .= '<div style="text-align:right;">		<form method="post" action="" name="delete_account" onsubmit="return confirm(\'Вы уверены? Потом восстановить не получиться!\');">		'.wp_nonce_field('delete-user-'.$user_ID,'_wpnonce',true,false).'		<input type="submit" id="delete_acc" class="recall-button"  value="Удалить свой профиль" name="delete_acc_user_recall"/>		</form>		</div>';	}	$profile_block .= '</div>';	$block_wprecall .= $profile_block;	return $block_wprecall;}//Редактируем произвольные поля профиляfunction recall_users_profile_edit(){global $wpdb;	if($_POST['add_field_profile']&&wp_verify_nonce( $_POST['_wpnonce'], 'update-profile-fields' )){		$get_fields = get_option( 'custom_profile_field' );		$get_fields = unserialize( $get_fields);				$profile_field = $_POST['user_fields_recall'];		$requared = $_POST['requared_user_field'];		$slug_field = $_POST['user_fields_slug'];				for($b=0;$b<8;$b++){			if($_POST['show_defolt_field_'.$b]) $show_defolt_field .= $_POST['show_defolt_field_'.$b].',';		}				if($show_defolt_field) update_option( 'show_defolt_field', $show_defolt_field );				if($profile_field){					$count_field = count($profile_field);			for($a=0;$a<$count_field;$a++){				if($profile_field[$a]){					$slug_edit = true;									if($get_fields){					foreach((array)$get_fields as $get){										if($get['slug']==$_POST['user_fields_slug'][$a]){							$slug_edit = false;								$slug = $get['slug'];							$end = $slug;							break;						}else{							$end = $a;						}									}				}else{					$end = $a;				}										if($slug_edit){						$slug = sanitize_title($profile_field[$a]);							$slug = $slug.'-'.rand(10,100);					}										$fields[$a]['slug'] = $slug;										$fields[$a]['type'] = $_POST['type_field_'.$end];					$fields[$a]['title'] = $profile_field[$a];																														if($_POST['requared_register_'.$end])						$fields[$a]['requared'] = $_POST['requared_register_'.$end];					else						$fields[$a]['requared'] = 0;					if($_POST['requared_user_field_'.$end])						$fields[$a]['req'] = $_POST['requared_user_field_'.$end];					else						$fields[$a]['req'] = 0;					if($_POST['register_user_field_'.$end])						$fields[$a]['register'] = $_POST['register_user_field_'.$end];					else						$fields[$a]['register'] = 0;											if($_POST['type_field_'.$end]=='select'||$_POST['type_field_'.$end]=='checkbox'||$_POST['type_field_'.$end]=='radio') $fields[$a]['field_select'] = $_POST['field_select_'.$end];				}else{					if($slug_field[$a]){						$slug = str_replace('-','_',$slug_field[$a]);						if($slug) $res = $wpdb->query("DELETE FROM wp_usermeta WHERE meta_key = '$slug' OR meta_key LIKE '$slug%'");						if($res) echo 'Все значения поля "'.$slug.'" были удалены из БД.';					}				}			}		}				$fields = serialize($fields);				$res = update_option( 'custom_profile_field', $fields );	}else{		$fields = get_option( 'custom_profile_field' );	}		$defolt_field = get_option( 'show_defolt_field' );	$defolt_field = explode(',',$defolt_field);		foreach((array)$defolt_field as $onefield){			switch($onefield){				case 'user_login': $select_login = 'checked="checked"'; break;				case 'first_name': $select_first = 'checked="checked"'; break;				case 'last_name': $select_last = 'checked="checked"'; break;				case 'nickname': $select_nickname = 'checked="checked"'; break;				case 'display_name': $select_display = 'checked="checked"'; break;				case 'email': $select_email = 'checked="checked"'; break;				case 'url': $select_url = 'checked="checked"'; break;				case 'description': $select_description = 'checked="checked"'; break;			}		}	$defolt_profile_field = '	<style>#inputs_user_fields table{cursor: move; background:#fafafa;border: 1px solid #CCCCCC;border-radius: 5px 5px 5px 5px;margin: 2px;width: 100%;} table td{padding: 2px 10px;} #inputs_user_fields textarea{width:100%;}  .one-col{} .two-col{width:20%;} .three-col{} .four-col{} .five-col{} #inputs_user_fields .new{background:yellow;cursor: default;}</style>	<p>Поля, необходимые для отображения в профиле отмечаем галочками.</p>	<table class="form-table" style="width:400px;">	<tr><td><input type="checkbox" name="show_defolt_field_0" '.$select_login.' value="user_login"/></td><td>Логин</td><td><input type="checkbox" name="show_defolt_field_1" '.$select_first.' value="first_name"/></td><td>Имя</td></tr>	<tr><td><input type="checkbox" name="show_defolt_field_2" '.$select_last.' value="last_name"/></td><td>Фамилия</td><td><input type="checkbox" name="show_defolt_field_3" '.$select_nickname.' value="nickname"/></td><td>Ник</td></tr>	<tr><td><input type="checkbox" name="show_defolt_field_4" '.$select_display.' value="display_name"/></td><td>Отображаемое имя</td><td><input type="checkbox" checked="checked" name="show_defolt_field_5" value="email"/></td><td>Емейл (обязательно)</td></tr>	<tr><td><input type="checkbox" name="show_defolt_field_6" '.$select_url.' value="url"/></td><td>Сайт</td><td><input type="checkbox" name="show_defolt_field_7" '.$select_description.' value="description"/></td><td>Статус</td></tr>	</table>';		$fields = unserialize( $fields);	if($fields){				$n=0;		foreach((array)$fields as $custom_field){			if($custom_field['type']=='select'||$custom_field['type']=='checkbox'||$custom_field['type']=='radio'){ 								$textarea_select = '<textarea rows="1" name="field_select_'.$custom_field['slug'].'">'.$custom_field['field_select'].'</textarea>';			}			$type_field = '<select id="'.$custom_field['slug'].'" class="type_field" name="type_field_'.$custom_field['slug'].'"><option value="text" '.selected($custom_field['type'],'text',false).'>Однострочное поле</option><option value="textarea" '.selected($custom_field['type'],'textarea',false).'>Многострочное поле</option><option value="select" '.selected($custom_field['type'],'select',false).'>Выпадающий список</option><option value="checkbox" '.selected($custom_field['type'],'checkbox',false).'>Чекбокс</option><option value="radio" '.selected($custom_field['type'],'radio',false).'>Радиокнопки</option></select>';									$field .= '			<li id="item-'.$custom_field['slug'].'" class="menu-item menu-item-edit-active">				<dl class="menu-item-bar">					<dt class="menu-item-handle">						<span class="item-title">'.$custom_field['title'].'</span>												<span class="item-controls">						<span class="item-type">'.$custom_field['type'].'</span>						<span class="item-order hide-if-js"></span>												<a id="edit-'.$custom_field['slug'].'" class="profilefield-item-edit item-edit" href="#" title="Изменить">edit</a>						</span>					</dt>				</dl>				<div id="settings-'.$custom_field['slug'].'" class="menu-item-settings" style="display: none;">					<p class="link-to-original" style="clear:both;">Ярлык: '.$custom_field['slug'].'<input type="hidden" name="user_fields_slug[]" value="'.$custom_field['slug'].'"/></p>					<div class="link-to-original" style="overflow:hidden;">						<p class="description description-thin" style="width: 325px;">						<label>Заголовок<br><input type="text" name="user_fields_recall[]" size="34" class="field" value="'.$custom_field['title'].'"/></label></p>						<p class="description description-thin"><label>Тип поля<br>'.$type_field.'</label></p>					</div>										<p id="content-'.$custom_field['slug'].'" class="link-to-original">'.$textarea_select.'					<input type="checkbox" class="first-chek" name="requared_register_'.$custom_field['slug'].'" value="1" '.checked($custom_field['requared'],1,false).' /> обязательное для заполнения поле<br />					<input type="checkbox" name="register_user_field_'.$custom_field['slug'].'" value="1" '.checked($custom_field['register'],1,false).' /> отобразить в форме регистрации (только плавающая форма и форма на странице) и при оформлении заказа для гостей<br />					<input type="checkbox" name="requared_user_field_'.$custom_field['slug'].'" value="1" '.checked($custom_field['req'],1,false).' /> показывать содержимое для других пользователей (вверху своего ЛК)</p>					<p align="right"><a id="'.$custom_field['slug'].'" class="item-delete profilefield-submitdelete deletion" href="#">Удалить</a></p>								</div>								</li>			';						$n++;			$textarea_select = '';		}	}else{				$field = '<li class="menu-item menu-item-edit-active">				<dl class="menu-item-bar">					<dt class="menu-item-handle">						<span class="item-title"><input type="text" size="34" name="user_fields_recall[]" class="field" value=""/></span>						<span class="item-controls">						<span class="item-type">Тип: <select id="new-0" class="type_field" name="type_field_0"><option value="text">Однострочное поле</option><option value="textarea">Многострочное поле</option><option value="select">Выпадающий список</option><option value="checkbox">Чекбокс</option><option value="radio">Радиокнопки</option></select></span>						</span>					</dt>				</dl>				<div class="menu-item-settings" style="display: block;">					<p id="content-new-0" class="link-to-original">					<input type="checkbox" class="first-chek" name="requared_register_0" value="1"/> обязательное поле (только для формы регистрации, если там выводится)<br />					<input type="checkbox" name="register_user_field_0" value="1"/> отобразить в форме регистрации (только плавающая форма и форма на странице) и при оформлении заказа для гостей<br />					<input type="checkbox" name="requared_user_field_0" value="1"/> показывать содержимое для других пользователей (вверху своего ЛК)					</p>													</div>								</li>';	}	$users_fields = '<style>#inputs_user_fields textarea{width:100%;}  #inputs_user_fields .menu-item-settings, #inputs_user_fields .menu-item-handle{padding-right:10px;width:100%;}</style>	<h2>Управление полями профиля</h2>		<form class="nav-menus-php" action="" method="post">	'.wp_nonce_field('update-profile-fields','_wpnonce',true,false).'	<h3>Поля по умолчанию</h3>	'.$defolt_profile_field.'	<h3>Произвольные поля профиля</h3>	<small>Ярлык должен быть латиницей, если формируется другой, то ставим плагин Rustolat</small><br>	<small># - разделитель между вариантами в полях с типом select, checkbox и radio</small><br>	<div id="inputs_user_fields" class="user_fields" style="width:550px;">	<ul id="sortable">	'.$field.'	</ul>		 </div>	 	 <p style="width:550px;"><input type="button" id="add_user_field"  class="button-secondary right" value="+ Добавить еще"></p>	 <input id="save_menu_footer" class="button button-primary menu-save" type="submit" value="Сохранить" name="add_field_profile">	 </form>	 <script>		jQuery(function(){			jQuery("#sortable").sortable();			return false;		});	 </script>	 ';	echo $users_fields;}add_filter('show_profile_fields_rcl','get_show_custom_profile_fields',10,2);function get_show_custom_profile_fields($fields_content,$author_lk){	$get_fields = get_option( 'custom_profile_field' );	$get_fields = unserialize( $get_fields);			if($get_fields){					foreach((array)$get_fields as $custom_field){							$slug = str_replace('-','_',$custom_field['slug']);			if($custom_field['req']==1){				$meta = get_the_author_meta($slug,$author_lk);				if($custom_field['type']=='text'&&$meta)					$show_custom_field .= '<p><b>'.$custom_field['title'].':</b> <span>'.esc_textarea($meta).'</span></p>';				if($custom_field['type']=='select'&&$meta||$custom_field['type']=='radio'&&$meta)					$show_custom_field .= '<p><b>'.$custom_field['title'].':</b> <span>'.$meta.'</span></p>';				if($custom_field['type']=='checkbox'){					$chek = explode('#',$custom_field['field_select']);					$count_field = count($chek);										$n=0;					$chek_field = '';					for($a=0;$a<$count_field;$a++){						$slug_chek = $slug.'_'.$a;						if(get_the_author_meta($slug_chek,$author_lk)){						$n++;							if($n==1) $chek_field .= get_the_author_meta($slug_chek,$author_lk);								else $chek_field .= ', '.get_the_author_meta($slug_chek,$author_lk);						}					}					if($n!=0) $show_custom_field .= '<p><b>'.$custom_field['title'].': </b>'.$chek_field.'</p>';				}									if($custom_field['type']=='textarea'&&get_the_author_meta($slug,$author_lk))					$show_custom_field .= '<p><b>'.$custom_field['title'].':</b></p><p>'.nl2br(esc_textarea($meta)).'</p>';			}		}			}		$fields_content .= $show_custom_field;	return $fields_content;}//Выводим произвольные поля профиля на странице пользователя в админкеif (is_admin()):	add_action('profile_personal_options', 'custom_profile_users_recall');	add_action('edit_user_profile', 'custom_profile_users_recall');endif;function custom_profile_users_recall($user){	$get_fields = get_option( 'custom_profile_field' );	$get_fields = unserialize( $get_fields);				if($get_fields){			$field = '			<h3>Произвольные поля профиля:</h3>			<table class="form-table">';			foreach((array)$get_fields as $custom_field){								$slug = str_replace('-','_',$custom_field['slug']);				$meta = get_the_author_meta($slug,$user->ID);				$field .= '<tr>				<th><label for="pass1">'.$custom_field['title'].':</label></th>';				if($custom_field['type']=='text')					$field .= '<td><input type="text" name="'.$slug.'" class="regular-text" id="'.$slug.'" maxlength="50" value="'.$meta.'" /><br/></td>';				if($custom_field['type']=='textarea')					$field .= '<td><textarea name="'.$slug.'" class="regular-text" id="'.$slug.'" rows="5" cols="50">'.$meta.'</textarea></td>';				if($custom_field['type']=='select'){					$fields = explode('#',$custom_field['field_select']);					$count_field = count($fields);					for($a=0;$a<$count_field;$a++){						$field_select .='<option value="'.$fields[$a].'" '.selected($meta,$fields[$a],false).'>'.$fields[$a].'</option>';					}					$field .= '<td><select name="'.$slug.'" class="regular-text" id="'.$slug.'">					'.$field_select.'					</select></td>';				}				if($custom_field['type']=='checkbox'){					$chek = explode('#',$custom_field['field_select']);					$count_field = count($chek);					$field .='<td>';					for($a=0;$a<$count_field;$a++){						$slug_chek = $slug.'_'.$a;						$field .='<input type="checkbox" name="'.$slug_chek.'" class="" value="'.$chek[$a].'" '.checked(get_the_author_meta($slug_chek,$user->ID),$chek[$a],false).'> '.$chek[$a].'<br />';					}					$field .='</td>';				}				if($custom_field['type']=='radio'){					$radio = explode('#',$custom_field['field_select']);					$count_field = count($radio);					$field .='<td>';					for($a=0;$a<$count_field;$a++){						$field .='<input type="radio" name="'.$slug.'" class="" value="'.$radio[$a].'" '.checked($meta,$radio[$a],false).'> '.$radio[$a].'<br />';					}					$field .='</td>';				}				$field .= '</tr>';							}			$field .= '</table>';			echo $field;		}}//Сохраняем изменения в произвольных полях профиля со страницы пользователяadd_action('personal_options_update', 'rcl_save_profile_fields');add_action('edit_user_profile_update', 'rcl_save_profile_fields');function rcl_save_profile_fields($user_id) {	if ( !current_user_can( 'edit_user', $user_id ) )		return false;	$get_fields = get_option( 'custom_profile_field' );	$get_fields = unserialize( $get_fields);			if($get_fields){						foreach((array)$get_fields as $custom_field){								$slug = str_replace('-','_',$custom_field['slug']);				if($custom_field['type']=='checkbox'){					$chek = explode('#',$custom_field['field_select']);					$count_field = count($chek);					for($a=0;$a<$count_field;$a++){						$slug_chek = $slug.'_'.$a;						if($_POST[$slug_chek]){							update_usermeta($user_id, $slug_chek, $_POST[$slug_chek]);														}else{							if(get_usermeta($user_id, $slug_chek, $_POST[$slug_chek])) delete_usermeta($user_id, $slug_chek, $_POST[$slug_chek]);						}					}				}				if($_POST[$slug]){					update_usermeta($user_id, $slug, $_POST[$slug]);												}else{					if(get_usermeta($user_id, $slug, $_POST[$slug])) delete_usermeta($user_id, $slug, $_POST[$slug]);				}			}		}}function get_footer_scripts_profile_rcl($script){		global $rcl_options;		if($rcl_options['avatar_weight']) $weight = $rcl_options['avatar_weight'];	else $weight = '2';		$script .= "			jQuery('#userpic').fileapi({	   url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/profile/upload-avatar.php',	   accept: 'image/*',	   imageSize: { minWidth: 150, minHeight: 150 },	   maxSize: ".$weight." * FileAPI.MB,	   elements: {		  active: { show: '#userpic-btn .js-upload', hide: '#userpic-btn .js-browse' },		  preview: {			 el: '.js-preview',			 width: 150,			 height: 150		  },		  progress: '#userpic-btn .js-progress'	   },	   onSelect: function (evt, ui){			ui.files;			if( ui.other.length ){			  var errors = ui.other[0].errors;			  if( errors ){				  errors.maxSize;				  errors.maxFiles;				  errors.minWidth;				  errors.minHeight;				  errors.maxWidth;				  errors.maxHeight;			  }		  }		  var file = ui.files[0];		  if( file ){			 jQuery('#popup').modal({				closeOnEsc: true,				closeOnOverlayClick: false,				onOpen: function (overlay){				   jQuery(overlay).on('click', '.js-upload', function (){					  jQuery.modal().close();					  jQuery('#userpic').fileapi('upload');				   });				   jQuery('.js-img', overlay).cropper({					  file: file,					  bgColor: '#fff',					  maxSize: [jQuery(window).width()-100, jQuery(window).height()-100],					  minSize: [150, 150],					  selection: '90%',					  onSelect: function (coords){						 jQuery('#userpic').fileapi('crop', file, coords);					  }				   });				}			 }).open();		  }	   },	   onUpload:function(evt, uiEvt){			jQuery('.userpic-notice').empty();		},	   onComplete:function(evt, uiEvt){			var result = uiEvt.result;			if(result['result']){				jQuery('.userpic-notice').html(result['result']);			}		}	});	jQuery('#webcam-btn').fileapi({		   url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/profile/upload-avatar.php',		   autoUpload: true,		   elements: {			  active: { show: '#webcam-btn .js-upload', hide: '#webcam-btn .js-webcam' },			  preview: {				 el: '#userpic .js-preview',				 width: 150,				 height: 150			  },			  progress: '#webcam-btn .js-progress'		   }	});			jQuery('.js-webcam').click(function (evt){		   var modal = jQuery('#popup').modal({			closeOnOverlayClick: false,			  onOpen: function (overlay){				 jQuery('.js-img', overlay).webcam({					width: 320,					height: 320,					error: function (err){					   jQuery.modal().close();					   alert(\"Похоже, что ваш браузер\nне поддерживает эту возможность\");					},					success: function (webcam){					   jQuery(overlay).on('click', '.js-upload', function (){						  jQuery('#webcam-btn').fileapi('add', webcam.shot());						  modal.close();					   });					}				 });			  },			  onClose: function (overlay){				 jQuery('.js-img', overlay).webcam('destroy');			  },			  onUpload:function(evt, uiEvt){				jQuery('.userpic-notice').empty();			},		   onComplete:function(evt, uiEvt){				var result = uiEvt.result;				if(result['result']){					jQuery('.userpic-notice').html(result['result']);				}			}		   });		   modal.open();		   evt.preventDefault();	});";	return $script;}add_filter('file_footer_scripts_rcl','get_footer_scripts_profile_rcl');?>