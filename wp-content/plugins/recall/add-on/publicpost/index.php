<?phpinclude_once('classes.php');if (!is_admin()):	add_action('wp_enqueue_scripts','script_post_recall');	endif;function script_post_recall(){	global $rcl_options;	if($rcl_options['media_downloader_recall']!=1) return false;	wp_enqueue_script( 'jquery' );			wp_enqueue_script( 'script_post_recall', plugins_url('js/scripts.js', __FILE__) );		}if (!is_admin()):		add_filter('the_content','author_info_recall',100);	add_filter('the_content','add_gallery_recall',70);endif;add_action('admin_menu', 'public_form_options_page_rcl',30);function public_form_options_page_rcl(){	add_submenu_page( 'manage-wprecall', 'Форма публикации', 'Форма публикации', 'edit_plugins', 'manage-public-form', 'recall_public_form_edit');}	add_filter('admin_options_wprecall','get_admin_public_page_content');function get_admin_public_page_content($content){	global $rcl_options;	$content .='<h2>Настройки публикации</h2>	<div id="options-'.get_key_addon_rcl(pathinfo(__FILE__)).'" class="wrap-recall-options">				<div class="option-block">			<h3>Общие настройки</h3>			<label>Название вкладки в ЛК</label>';				if(!$rcl_options['tab_public']) $rcl_options['tab_public'] = 'Публикация';				$content .='<input type="text" name="tab_public" value="'.$rcl_options['tab_public'].'" size="10">				<small>Впишите свою надпись на кнопке переключения вкладки в личном кабинете</small>';			$content .= '<label>Страница публикации и редактирования записи</label>';			$args = array(    				'selected'   => $rcl_options['public_form_page_rcl'],   				'name'       => 'public_form_page_rcl',				'show_option_none' => '<span style="color:red">Не выбрано</span>',				'echo'             => 0  			);  			$content .= wp_dropdown_pages( $args );			$content .= '<small>Требуется для правильного формирования ссылки на редактирование записи, необходимо указать страницу где расположен шорткод [public-form] независимо от того, где выводится сама форма публикации эта страница будет использоваться для редактирования записи</small>			<label>Вывод информации об авторе публикации</label>			<select name="info_author_recall" size="1">				<option value="">Отключено</option>				<option value="1" '.selected($rcl_options['info_author_recall'],1,false).'>Включено</option>			</select>						<label>Вкладка списка публикаций в ЛК</label>			<select name="publics_block_rcl" size="1">				<option value="">Отключено</option>				<option value="1" '.selected($rcl_options['publics_block_rcl'],1,false).'>Включено</option>			</select>			<label>Вывод списка публикаций пользователя</label>			<select name="view_publics_block_rcl" size="1">				<option value="">Выводить только хозяину ЛК</option>				<option value="1" '.selected($rcl_options['view_publics_block_rcl'],1,false).'>Показывать всем, включая гостей</option>			</select>		</div>		<div class="option-block">			<h3>Рубрики</h3>			<label>Разрешенные рубрики</label>			<input type="text" name="id_parent_category" value="'.$rcl_options['id_parent_category'].'" size="30">			<small>ID рубрик в которых разрешена публикация разделяйте запятыми. Эта настройка является общей для всех форм публикации, но можно указать нужные категории в шорткоде формы, например: [public-form cats="72,149"] </small>						<label>Кол-во рубрик к выбору</label>';			$count_cat = $rcl_options['count_category_post'];			if(!$count_cat) $count_cat = 1;			$content .= '<select name="count_category_post" size="1">';				for($a=1;$a<10;$a++){					$content .= '<option value="'.$a.'" '.selected($count_cat,$a,false).'>'.$a.'</option>';				}			$content .= '</select>		</div>		<div class="option-block">			<h3>Медиафайлы</h3>			<label>Порядок загрузки медиафайлов к публикациям</label>			<select name="media_downloader_recall" size="1">				<option value="">Загрузка Wp-Recall</option>				<option value="1" '.selected($rcl_options['media_downloader_recall'],1,false).'>Медиабиблиотека Wordpress</option>			</select>			<small><b>Примечание:</b> Используя возможность загрузки медиафайлов Wp-Recall вы запрещаете пользователям размещать изображения непосредственно в контенте записи и отключаете возможность использования медиабиблиотеки сайта, при этом загруженные файлы будут формировать галерею изображений над контентом публикации.</small>			<label>Кол-во изображений в галерее Wp-Recall</label>';			$count_img = $rcl_options['count_image_gallery'];			if(!$count_img) $count_img = 1;			$content .= '<select name="count_image_gallery" size="1">';				for($a=1;$a<=20;$a++){					$content .= '<option value="'.$a.'" '.selected($count_img,$a,false).'>'.$a.'</option>';				}			$content .= '</select>			<label>Максимальный размер изображений, Mb</label>			<input type="text" name="public_gallery_weight" value="'.$rcl_options['public_gallery_weight'].'" size="30">			<small>Ограничить загрузку изображений к публикации данным значением в мегабайтах. По-умолчанию, 2мб</small>		</div>		<div class="option-block">			<h3>Форма публикации</h3>			<label>Текстовый редактор</label>';			$type_editor = $rcl_options['type_text_editor'];			$content .= '			<select name="type_text_editor" size="1">						<option value="">Простой TEXTAREA</option>				<option value="1" '.selected($type_editor,1,false).'>Загружать TinyMCE-редактор</option>				<option value="2" '.selected($type_editor,2,false).'>Загружать HTML-редактор</option>				<option value="3" '.selected($type_editor,3,false).'>Загружать TinyMCE и HTML</option>							</select>			<label>Вывод формы публикации в ЛК</label>			<select name="output_public_form_rcl" size="1">				<option value="">Не выводить</option>				<option value="1" '.selected($rcl_options['output_public_form_rcl'],1,false).'>Выводить</option>			</select>		</div>		<div class="option-block">			<h3>Публикация записей</h3>			<label>Публикация разрешена</label>';			$public_access = $rcl_options['user_public_access_recall'];			$content .= '			<select name="user_public_access_recall" size="1">						<option value="10" '.selected($public_access,10,false).'>Только Администраторам</option>				<option value="7" '.selected($public_access,7,false).'>Редакторам и старше</option>				<option value="2" '.selected($public_access,2,false).'>Авторам и старше</option>				<option value="1" '.selected($public_access,1,false).'>Участникам и старше</option>				<option value="0" '.selected($public_access,0,false).'>Всем зарегистрированным пользователям</option>			</select>			<label>Модерация публикаций</label>			<select name="moderation_public_post" size="1">				<option value="">Публиковать сразу</option>				<option value="1" '.selected($rcl_options['moderation_public_post'],1,false).'>Отправлять на модерацию</option>			</select>			<small><b>Если используется модерация:</b> Чтобы пользователь мог видеть свою публикацию до того, как она пройдет модерацию, необходимо, чтобы он имел на сайте права не ниже Автора</small>		</div>	</div>';	return $content;}add_action('init','init_publics_block_rcl');function init_publics_block_rcl(){	global $rcl_options;	if($rcl_options['publics_block_rcl']==1){		add_filter('the_button_wprecall','get_wprecall_posts_button',30,2);		add_filter('the_block_wprecall','recall_posts_block',30,2);	}	if($rcl_options['output_public_form_rcl']==1){		add_filter('the_button_wprecall','get_wprecall_postform_button',50,2);		add_filter('the_block_wprecall','recall_block_postform',50,2);	}}function get_wprecall_postform_button($button,$author_lk){	global $user_ID, $rcl_options;;	if(!$button) $status = 'active';	if(!$rcl_options['tab_public']) $rcl_options['tab_public'] = 'Публикация';	if($user_ID==$author_lk) $button .= ' <a href="#" id="postform" class="block_button '.$status.'">'.$rcl_options['tab_public'].'</a> ';	return $button;}function recall_block_postform($block_wprecall, $author_lk){	global $user_ID,$rcl_options,$wpdb;	if($user_ID!=$author_lk) return $block_wprecall;	if(!$block_wprecall) $status = 'active';		$form_block = '<div class="postform_block recall_content_block '.$status.'">';	$form_block .= do_shortcode('[public-form]');	$form_block .= '</div>';	$block_wprecall .= $form_block;	return $block_wprecall;}function get_wprecall_posts_button($button,$author_lk){	global $user_ID,$rcl_options;	if($user_ID!=$author_lk&&$rcl_options['view_publics_block_rcl']!=1) return $button;	if(!$button) $status = 'active';		$button .= ' <a href="#" id="publics" class="block_button '.$status.'">Посты</a> ';	return $button;}add_filter('posts_button_rcl','add_post_button_public_block_rcl',30,2);function add_post_button_public_block_rcl($button,$author_lk){	global $user_ID;	if(!$button) $status = 'active';		$button .= ' <a href="#" id="posts_rcl" class="child_block_button '.$status.'">Записи</a> ';	return $button;}add_filter('posts_block_rcl','add_post_block_public_block_rcl',30,2);function add_post_block_public_block_rcl($posts_block,$author_lk){	global $user_ID,$wpdb,$rcl_options;	if(!$posts_block) $status = 'active';	$posts_block .= '<div class="posts_rcl_block recall_child_content_block '.$status.'">';		$posts_block .= get_postslist_rcl('post','Записи',$author_lk);	$posts_block .= '</div>';	return $posts_block;}function get_postslist_rcl($post_type,$title,$author_lk){		global $user_ID,$wpdb,$rcl_options;		$posts = $wpdb->get_results("SELECT * FROM ".$wpdb->prefix."posts WHERE post_author='$author_lk' AND post_type='$post_type' AND post_status NOT IN ('draft','auto-draft') ORDER BY post_date DESC LIMIT 20");		if($posts){			$rayting = false;		if(function_exists('get_rayting_block_rcl')){				foreach((array)$posts as $p){if(++$b>1) $p_list .= ',';$p_list .= $p->ID;}				$rayt_p = $wpdb->get_results("SELECT * FROM ".RCL_PREF."total_rayting_posts WHERE post_id IN ($p_list)");					foreach((array)$rayt_p as $r){$rayt[$r->post_id] = $r->total;}			$rayting = true;		}				$posts_block .= '		<h3>Опубликованные '.$title.'</h3>';		$posts_block .= get_pagenavi_ajax_rcl($author_lk,$post_type);		$posts_block .= '<table class="publics-table-rcl">		<tr>			<td>Дата</td><td>Заголовок</td><td>Статус</td>';			//if($user_ID==$author_lk) $posts_block .= '<td>Ред.</td>';			$posts_block .= '</tr>';		foreach($posts as $post){			if($post->post_status=='pending') $status = '<span class="pending">на утв.</span>';			elseif($post->post_status=='trash') $status = '<span class="pending">удален</span>';			else $status = '<span class="publish">опубл.</span>';			$posts_block .= '<tr>			<td width="50">'.mysql2date('d.m.y', $post->post_date).'</td><td><a target="_blank" href="'.$post->guid.'">'.$post->post_title.'</a>';			if($rayting) $posts_block .= ' '.get_rayting_block_rcl($rayt[$post->ID]);			$posts_block .= '</td><td>'.$status.'</td>';			//if($user_ID==$author_lk) $posts_block .= '<td><a target="_blank" href="'.get_permalink($rcl_options['public_form_page_rcl']).'?rcl-post-edit='.$post->ID.'">Ред.</a></td>';			$posts_block .= '</tr>';		}		$posts_block .= '</table>';	}else{		$posts_block .= '<h3>'.$title.' еще не публиковались</h3>';	}	return $posts_block;}function get_page_content_rcl(){	global $user_ID,$wpdb,$rcl_options;		$type = $_POST['type'];	$start = $_POST['start'];	$author_lk = $_POST['id_user'];		$start .= ',';		//$edit_url = get_redirect_url_rcl(get_permalink($rcl_options['public_form_page_rcl']));		$posts = $wpdb->get_results("SELECT * FROM ".$wpdb->prefix."posts WHERE post_author='$author_lk' AND post_type='$type' AND post_status NOT IN ('draft','auto-draft') ORDER BY post_date DESC LIMIT $start 20");				$rayting = false;		if(function_exists('get_rayting_block_rcl')){				foreach((array)$posts as $p){if(++$b>1) $p_list .= ',';$p_list .= $p->ID;}				$rayt_p = $wpdb->get_results("SELECT * FROM ".RCL_PREF."total_rayting_posts WHERE post_id IN ($p_list)");					foreach((array)$rayt_p as $r){$rayt[$r->post_id] = $r->total;}			$rayting = true;		}				$posts_block .='<table class="publics-table-rcl">		<tr>			<td>Дата</td><td>Заголовок</td><td>Статус</td>';			//if($user_ID==$author_lk) $posts_block .= '<td>Ред.</td>';			$posts_block .= '</tr>';		foreach((array)$posts as $post){			if($post->post_status=='pending') $status = '<span class="pending">на утв.</span>';			elseif($post->post_status=='trash') $status = '<span class="pending">удален</span>';			else $status = '<span class="publish">опубл.</span>';			$posts_block .= '<tr>			<td>'.mysql2date('d-m-Y', $post->post_date).'</td><td><a target="_blank" href="'.$post->guid.'">'.$post->post_title.'</a>';			if($rayting) $posts_block .= ' '.get_rayting_block_rcl($rayt[$post->ID]);			$posts_block .= '</td><td>'.$status.'</td>';			//if($user_ID==$author_lk) $posts_block .= '<td><a target="_blank" href="'.$edit_url.'rcl-post-edit='.$post->ID.'">Ред.</a></td>';			$posts_block .= '</tr>';		}		$posts_block .= '</table>';	$log['post_content']=$posts_block;	$log['recall']=100;				echo json_encode($log);	    exit;}add_action('wp_ajax_get_page_content_rcl', 'get_page_content_rcl');add_action('wp_ajax_nopriv_get_page_content_rcl', 'get_page_content_rcl');function recall_posts_block($block_wprecall, $author_lk){	global $user_ID,$wpdb,$rcl_options;	if($user_ID!=$author_lk&&$rcl_options['view_publics_block_rcl']!=1) return $block_wprecall;	if(!$block_wprecall) $status = 'active';			$posts_block .= '<div id="publics_block" class="publics_block recall_content_block '.$status.'">';		$p_button = apply_filters('posts_button_rcl',$p_button,$author_lk);	$posts_block .= $p_button;	$p_block = apply_filters('posts_block_rcl',$p_block,$author_lk);		$posts_block .= $p_block;		$posts_block .= '</div>';	$block_wprecall .= $posts_block;			return $block_wprecall;}function recall_public_form_edit(){	global $wpdb;		if($_GET['form']) $form = $_GET['form'];		if($_POST['delete-form']&&wp_verify_nonce( $_POST['_wpnonce'], 'update-public-fields' )){				$id_form = $_POST['id-form'];		$_GET['status'] = 'old';		$wpdb->query("DELETE FROM ".$wpdb->prefix."options WHERE option_name LIKE 'custom_public_fields_$id_form'");		$form = false;	}		if(!$form){		$option_name = $wpdb->get_var("SELECT option_name FROM ".$wpdb->prefix."options WHERE option_name LIKE 'custom_public_fields%'");		if($option_name) $form = preg_replace("/[a-z_]+/", '', $option_name);		else $form = 1;	}		if($_POST['add_field_public']&&wp_verify_nonce( $_POST['_wpnonce'], 'update-public-fields' )){		$_GET['status'] = 'old';		$get_fields = get_option( 'custom_public_fields_'.$form );		$get_fields = unserialize( $get_fields);				$public_title = $_POST['public_fields_title'];		$slug_field = $_POST['public_fields_slug'];						if($public_title){					$count_field = count($public_title);			for($a=0;$a<$count_field;$a++){				if($public_title[$a]){					$slug_edit = true;									if($get_fields){					foreach((array)$get_fields as $get){										if($get['slug']==$_POST['public_fields_slug'][$a]){							$slug_edit = false;								$slug = $get['slug'];							$end = $slug;							break;						}else{							$end = $a;						}									}				}else{					$end = $a;				}										if($slug_edit){						$slug = sanitize_title($public_title[$a]);							$slug = $slug.'-'.rand(10,100);					}										$fields[$a]['slug'] = $slug;										$fields[$a]['type'] = $_POST['type_field_'.$end];					$fields[$a]['title'] = $public_title[$a];																														if($_POST['requared_public_'.$end])						$fields[$a]['requared'] = $_POST['requared_public_'.$end];					else						$fields[$a]['requared'] = 0;																if($_POST['type_field_'.$end]=='select'||$_POST['type_field_'.$end]=='checkbox'||$_POST['type_field_'.$end]=='radio') 						$fields[$a]['field_select'] = $_POST['field_select_'.$end];				}else{					if($slug_field[$a]){						$slug = str_replace('-','_',$slug_field[$a]);						if($slug) $res = $wpdb->query("DELETE FROM wp_postmeta WHERE meta_key = '$slug' OR meta_key LIKE '$slug%'");						if($res) echo 'Все значения поля "'.$slug.'" были удалены из Базы Данных.';					}				}			}		}				$fields = serialize($fields);				$res = update_option( 'custom_public_fields_'.$form, $fields );	}else{				$fields = get_option( 'custom_public_fields_'.$form );			}			$fields = unserialize( $fields);		$custom_public_form_data = $wpdb->get_results("SELECT * FROM ".$wpdb->prefix."options WHERE option_name LIKE 'custom_public_fields%'");	//$wpdb->query("DELETE FROM ".$wpdb->prefix."options WHERE option_name LIKE 'custom_public_fields%'");	$count_form = count($custom_public_form_data);		if($custom_public_form_data){		/*$form_navi = '<h3>Доступные формы</h3><div class="form-navi">';		foreach((array)$custom_public_form_data as $form_data){			$id_form = preg_replace("/[a-z_]+/", '', $form_data->option_name);			if($form==$id_form) $class = 'button-primary';			else $class = 'button-secondary';			$form_navi .= '<input class="'.$class.'" type="button" onClick="document.location=\''.get_bloginfo('wpurl').'/wp-admin/admin.php?page=manage-public-form&form='.$id_form.'\';" value="ID:'.$id_form.'" name="public-form-'.$id_form.'">';		}			if($_GET['status']!='new') $form_navi .= '<input class="button-secondary" type="button" onClick="document.location=\''.get_bloginfo('wpurl').'/wp-admin/admin.php?page=manage-public-form&form='.++$id_form.'&status=new\';" value="Добавить еще форму" name="public-form-'.$id_form.'">';		$form_navi .= '</div>				<h3>Форма ID:'.$form.' </h3>';		if($_GET['status']!='new') $form_navi .= '<form method="post" action="">			'.wp_nonce_field('update-public-fields','_wpnonce',true,false).'			<input class="button-primary" type="submit" value="Удалить все поля" onClick="return confirm(\'Вы уверены?\');" name="delete-form">			<input type="hidden" value="'.$form.'" name="id-form">		</form>';*/	}else{		$form = 1;		//$form_navi = '<h3>Форма ID:'.$form.' </h3>';	}			if($fields){				$n=0;		foreach((array)$fields as $custom_field){			if($custom_field['type']=='select'||$custom_field['type']=='checkbox'||$custom_field['type']=='radio'){ 								$textarea_select = '<textarea rows="1" name="field_select_'.$custom_field['slug'].'">'.$custom_field['field_select'].'</textarea>';			}			$type_field = '<select name="type_field_'.$custom_field['slug'].'"><option value="text" '.selected($custom_field['type'],'text',false).'>Однострочное поле</option><option value="textarea" '.selected($custom_field['type'],'textarea',false).'>Многострочное поле</option><option value="select" '.selected($custom_field['type'],'select',false).'>Выпадающий список</option><option value="checkbox" '.selected($custom_field['type'],'checkbox',false).'>Чекбокс</option><option value="radio" '.selected($custom_field['type'],'radio',false).'>Радиокнопки</option></select>';									$slug = str_replace('-','_',$custom_field['slug']);						$field .= '			<li id="item-'.$custom_field['slug'].'" class="menu-item menu-item-edit-active">				<dl class="menu-item-bar">					<dt class="menu-item-handle">						<span class="item-title">'.$custom_field['title'].'</span>												<span class="item-controls">						<span class="item-type">'.$custom_field['type'].'</span>												<a id="edit-'.$custom_field['slug'].'" class="profilefield-item-edit item-edit" href="#" title="Изменить">Изменить</a>						</span>					</dt>				</dl>				<div id="settings-'.$custom_field['slug'].'" class="menu-item-settings" style="display: none;">					<p class="link-to-original" style="clear:both;">Ярлык: '.$slug.'<input type="hidden" name="public_fields_slug[]" value="'.$custom_field['slug'].'"/></p>					<div class="link-to-original" style="overflow:hidden;">						<p class="description description-thin" style="width: 300px;">						<label>Заголовок<br><input type="text" name="public_fields_title[]" size="30" class="field" value="'.$custom_field['title'].'"/></label></p>						<p class="description description-thin"><label>Тип поля<br>'.$type_field.'</label></p>					</div>										<p class="link-to-original">'.$textarea_select.'					<input type="checkbox" name="requared_public_'.$custom_field['slug'].'" value="1" '.checked($custom_field['requared'],1,false).' /> обязательное поле</p>					<p align="right"><a id="'.$custom_field['slug'].'" class="item-delete profilefield-submitdelete deletion" href="#">Удалить</a></p>								</div>								</li>			';						$n++;			$textarea_select = '';		}	}else{				$field = '<li class="menu-item menu-item-edit-active">				<dl class="menu-item-bar">					<dt class="menu-item-handle">						<span class="item-title"><input type="text" size="34" name="public_fields_title[]" class="field" value=""/></span>						<span class="item-controls">						<span class="item-type">Тип: <select name="type_field_0"><option value="text">Однострочное поле</option><option value="textarea">Многострочное поле</option><option value="select">Выпадающий список</option><option value="checkbox">Чекбокс</option><option value="radio">Радиокнопки</option></select></span>						</span>					</dt>				</dl>				<div class="menu-item-settings" style="display: block;">					<p>					<input type="checkbox" name="requared_public_0" value="1"/> обязательное поле<br />										</p>													</div>								</li>';	}	$users_fields = '<style>#inputs_public_fields textarea{width:100%;}  #inputs_public_fields .menu-item-settings, #inputs_public_fields .menu-item-handle{padding-right:10px;width:100%;}</style>	<h2>Произвольные поля формы публикации</h2>		<small># - разделитель между вариантами в полях с типом select, checkbox и radio</small><br>	<small>Для размещения формы публикации используем шорткод [public-form]</small><br>	<small>Форма публикации уже содержит обязательные поля для заголовка записи, контента, ее категории и указания метки.<br>Здесь вы можете создать дополнительные поля для формы публикации, которые пользователи смогут заполнять.</small><br>			'.$form_navi.'	<form class="nav-menus-php" action="" method="post">	'.wp_nonce_field('update-public-fields','_wpnonce',true,false).'	<div id="inputs_public_fields" class="public_fields" style="width:550px;">	<ul id="sortable">	'.$field.'	</ul>		 </div>	 	 <p style="width:550px;"><input type="button" id="add_public_field"  class="button-secondary right" value="+ Добавить поле"></p>	 <input id="save_menu_footer" class="button button-primary menu-save" type="submit" value="Сохранить" name="add_field_public">	 </form>	 <p>Чтобы вывести все данные занесенные в созданные произвольные поля формы публикации внутри опубликованной записи можно воспользоваться функцией<br />	 <b>get_custom_post_meta_recall($post_id)</b><br />	Разместите ее внутри цикла и передайте ей идентификатор записи первым аргументом<br />	Также можно вывести каждое произвольное поле в отдельности через функцию<br /> 	<b>get_post_meta($post_id,$slug,1)</b><br />	где<br />	$post_id - идентификатор записи<br />	$slug - ярлык произвольного поля формы</p>	 <script>		jQuery(function(){			jQuery("#sortable").sortable();			return false;		});	 </script>	 ';	echo $users_fields;}//формируем галерею записиfunction add_gallery_recall($content){global $post;	if(get_post_meta($post->ID, 'recall_slider', 1)!=1||!is_single()||$post->post_type=='products') return $content;					$args = array( 		'post_parent' => $post->ID,		'post_type'   => 'attachment', 		'numberposts' => -1,		'post_status' => 'any',		'post_mime_type'=> 'image'		);		$childrens = get_children($args);				if( $childrens ){			$gallery = '<div class="rcl-gallery">				<ul class="bxslider">';			foreach((array) $childrens as $children ){				$large = wp_get_attachment_image_src( $children->ID, 'large' );				$gallery .= '<li><a class="fancybox" href="'.$large[0].'"><img src="'.$large[0].'"></a></li>';				$thumbs[] = $large[0];			}			$gallery .= '</ul>			</div>';						if(count($thumbs)>1){				$gallery .= '<div id="bx-pager">';					foreach($thumbs as $k=>$src ){						$gallery .= '<a data-slide-index="'.$k.'" href=""><img src="'.$src.'" /></a>';					}				$gallery .= '</div>';			}		}	return $gallery.$content;}add_action('publish_post', 'post_subscribtion_users');function post_subscribtion_users($post_id){	global $wpdb;	$post_data = $wpdb->get_row("SELECT * FROM wp_posts WHERE ID = '$post_id'");	$post_content = substr($post_data->post_content, 0, 535);	$post_content = preg_replace('@(.*)\s[^\s]*$@s', '\\1 ...', $post_content);	$categorys = get_the_category($post_id);	$name = get_bloginfo('name');	$perm = get_permalink($post_id);	foreach((array)$categorys as $category) { 		$users_subsc = $wpdb->get_results("SELECT t1.user_email FROM ".$wpdb->prefix."users t1 		INNER JOIN ".$wpdb->prefix."usermeta t2 ON t2.user_id = t1.ID WHERE t2.meta_key = 'user_category_subsc_".$category->cat_ID."' AND  t2.meta_value = '1'");		if($users_subsc){			foreach((array)$users_subsc as $user){								$headers = 'From: '.$name.' <noreaply@'.$_SERVER['HTTP_HOST'].'>' . "\r\n";				$email = $user->user_email;				$subject = $post_data->post_title;							$textmail = 'На сайте "'.$name.'" добавлена новая статья!Название статьи: '.$subject.'Краткое содержание статьи:'.$post_content.'Ознакомьтесь с содержанием статьи по ссылке:'.$perm.'______________________________________________________________________Вы получили это письмо, тк подписаны на получение новых статей из категории "'.$category->cat_name.'"При желании вы можете отписаться от получения новых писем в своем личном кабинете.Пожалуйста не отвечайте на это письмо, оно сформировано автоматически.';				wp_mail($email, $subject, $textmail, $headers);			}		}	} }//Выводим инфу об авторе записи в конце постаfunction author_info_recall($content){global $post,$wpdb,$rcl_options;	if($rcl_options['info_author_recall']!=1) return $content;	if(!is_single()) return $content;	if($post->post_type=='products'||$post->post_type=='page') return $content;	$author = $post->post_author;		$karma = apply_filters('get_all_rayt_user_rcl',$karma,$author);		$out = "<div id='block_author-rcl'>			<div style='float:left;margin-right:10px;'>".get_avatar($author,60)."</div>			<div>			<h3 style='clear: none;'>Информация об авторе</h3>			<p><b>Ник:</b> <a href='".get_author_posts_url($author)."'>".get_the_author_meta( 'display_name', $author )."</a>";			if($karma) $out .= "<b>  Общий рейтинг:</b> ".raytout($karma)."</p>";			$desc = apply_filters('rcl_postdesc_user',$desc,$author);			$out .= $desc;			$out .= "</div></div>";	return $content.$out;}/*************************************************Удаление поста*************************************************/function delete_redactor_post(){	global $wpdb;	global $user_ID;	if($user_ID){		$log['result']=100;			$result = wp_delete_post( $_POST['post_id'] );				$temp_gal = unserialize(get_the_author_meta('tempgallery',$user_ID));		if($temp_gal){			$cnt = count($temp_gal);			foreach((array)$temp_gal as $key=>$gal){ if($gal['ID']==$_POST['post_id']) unset($temp_gal[$key]); }			foreach((array)$temp_gal as $t){ $new_temp[] = $t; }			if($new_temp) update_usermeta($user_ID,'tempgallery',serialize($new_temp));			else delete_usermeta($user_ID,'tempgallery');		}	}else {		$log['result']=1;	}	echo json_encode($log);	    exit;}add_action('wp_ajax_delete_redactor_post', 'delete_redactor_post');function get_basedir_image_rcl($path){	$dir = explode('/',$path);	$cnt = count($dir) - 2;	for($a=0;$a<=$cnt;$a++){		$base_path .= $dir[$a].'/';	}	return $base_path;}function get_single_image_gallery_rcl($atts,$content=null){	global $post;	extract(shortcode_atts(array('id'=>'','size'=>'thumbnail'),$atts));	if(!$id) return false;		$upl_dir = wp_upload_dir();	$meta = wp_get_attachment_metadata($id);		if(!$meta) return false;		$full = $upl_dir['baseurl'].'/'.$meta['file'];		if($size=='full'){		$img = '<img class="thumbnail full"  src="'.$full.'">';	}else{			$size_ar = explode(',',$size);		if(isset($size_ar[1])){			$img = get_the_post_thumbnail($post->ID,$size_ar);		}else{			$dir_img = get_basedir_image_rcl($meta['file']);			$img = '<img class="thumbnail"  src="'.$upl_dir['baseurl'].'/'.$dir_img.'/'.$meta['sizes'][$size]['file'].'">';		}		}	$image .= '<a href="'.$upl_dir['baseurl'].'/'.$meta['file'].'" rel="lightbox">';	$image .= $img;	$image .= '</a>';	return $image;}add_shortcode('art','get_single_image_gallery_rcl');function get_edit_post_link_rcl($content){	global $post,$user_ID;	if(is_tax('groups')||$post->post_type=='page'||$post->post_type=='task') return $content;	if( $post->post_author==$user_ID ) {		$content = '<p class="post-edit-button"><a title="Редактировать" href="'. get_edit_post_link($post->ID) .'"><img src="'.get_bloginfo('wpurl').'/wp-content/plugins/recall/img/redactor.png"></a></p>'.$content;	}	return $content;}add_filter('the_content','get_edit_post_link_rcl',999);add_filter('the_excerpt','get_edit_post_link_rcl',999);//Публикация записи function add_new_post_recall(){	global $user_ID,$wpdb,$rcl_options;	if(!$user_ID) return false;	require_once(ABSPATH . "wp-admin" . '/includes/image.php');	require_once(ABSPATH . "wp-admin" . '/includes/file.php');	require_once(ABSPATH . "wp-admin" . '/includes/media.php');		$thumb = $_POST['thumb'];	$post_title = $_POST['post_title'];			$post_content = $_POST['post_content'];		$post_tags = $_POST['post_tags'];			$post_cat = $_POST['cat'];	$id_form = $_POST['id_form'];	$post_count = $_POST['post_count'];	$gallery = $_POST['add-gallery-rcl'];	if($rcl_options['moderation_public_post']==1) $post_status = 'pending';	else $post_status = 'publish';		if($rcl_options['nomoder_rayt']){		$all_r = get_all_rayt_user(0,$user_ID);		if($all_r >= $rcl_options['nomoder_rayt']) $post_status = 'publish';	}	$catargs = array(   		'orderby'                  => 'name'  		,'order'                    => 'ASC'  		,'hide_empty'               => 0 		,'hierarchical'=>true	);					$cats = get_categories( $catargs );		$term_l = new Edit_Terms_List_rcl();	$new_cat = $term_l->get_terms_list($cats,$post_cat);	$my_post = array(		'post_title' => $post_title,		'post_content' => $post_content,		'post_status' => $post_status,				'post_author' => $user_ID,		'tags_input'     => $post_tags,		'post_category' => $new_cat	);	$id_post = wp_insert_post( $my_post );	if ($id_post) {			if($id_form) edit_custom_fields_post_rcl($id_post);				if($rcl_options['media_downloader_recall']==1){			if(isset($thumb)) add_post_meta($id_post, '_thumbnail_id', $thumb);		}else{			$temp_gal = unserialize(get_the_author_meta('tempgallery',$user_ID));			if($temp_gal){				$cnt = count($temp_gal);				foreach((array)$temp_gal as $key=>$gal){ 					if($thumb[$gal['ID']]==1) add_post_meta($id_post, '_thumbnail_id', $gal['ID']);						wp_update_post( array('ID'=>$gal['ID'],'post_parent'=>$id_post) );				}				if($gallery==1) add_post_meta($id_post, 'recall_slider', 1);				delete_usermeta($user_ID,'tempgallery');								if(!$thumb){					$args = array( 					'post_parent' => $id_post,					'post_type'   => 'attachment', 					'numberposts' => 1,					'post_status' => 'any',					'post_mime_type'=> 'image'					);					$child = get_children($args);					if($child){ foreach($child as $ch){add_post_meta($id_post, '_thumbnail_id',$ch->ID);} }				}			}		}				if($post_status == 'pending'){			wp_redirect('/?p='.$id_post.'&preview=true'); exit;			}else{			wp_redirect( get_permalink($id_post) ); exit;				}				} else {		wp_die('Error');	}		}function add_new_post_recall_activate ( ) {  if ( isset( $_POST['add_new_post'] )&&wp_verify_nonce( $_POST['_wpnonce'], 'edit-post-rcl' ) ) {    add_action( 'wp', 'add_new_post_recall' );  }}add_action('init', 'add_new_post_recall_activate');function edit_post_rcl_recall(){	global $user_ID;	global $wpdb,$rcl_options;	if(!$user_ID) return false;				$thumb = $_POST['thumb'];		$post_title = $_POST['post_title'];				$post_content = $_POST['post_content'];			$post_tags = $_POST['post_tags'];				$post_cat = $_POST['cat'];		$id_form = $_POST['id_form'];		$id_post = $_POST['post-rcl'];		$gallery = $_POST['add-gallery-rcl'];				$old = get_post($id_post);				$postdata = array();		$postdata['ID'] = $id_post;		$postdata['post_title'] = $post_title;		$postdata['post_content'] = $post_content;				if($old->post_type=='post-group'){			$gr_tag = $_POST['group-tag'];			if($gr_tag){							$groups = get_the_terms( $id_post, 'groups' );				foreach($groups as $group){if($group->parent!=0) continue; $group_id = $group->term_id;}							$term = term_exists( $gr_tag, 'groups',$group_id );				if(!$term){					$term = wp_insert_term(					  $gr_tag,					  'groups',					  array(						'description'=> '',						'slug' => '',						'parent'=> $group_id					  )					);				}				wp_set_object_terms( $id_post, array((int)$term['term_id'],(int)$group_id), 'groups' );			}		}				if($rcl_options['media_downloader_recall']==1){			if(isset($thumb)) update_post_meta($id_post, '_thumbnail_id', $thumb);			else delete_post_meta($id_post, '_thumbnail_id');		}else{			if($thumb){				foreach((array)$thumb as $key=>$gal){ 					update_post_meta($id_post, '_thumbnail_id', $key);				}						}else{				$args = array( 				'post_parent' => $id_post,				'post_type'   => 'attachment', 				'numberposts' => 1,				'post_status' => 'any',				'post_mime_type'=> 'image'				);				$child = get_children($args);				if($child){								foreach($child as $ch){update_post_meta($id_post, '_thumbnail_id',$ch->ID);} 				}			}		}				if($old->post_type=='products'){			$args = array( 			'post_parent' => $id_post,			'post_type'   => 'attachment', 			'numberposts' => -1,			'post_status' => 'any',			'post_mime_type'=> 'image'			);			$temp_gal = get_children($args);			foreach((array)$temp_gal as $key=>$gal){				$attach_list[] = $gal->ID;									}			$attach_list = implode(',',$attach_list);				update_post_meta($id_post, 'children_prodimage', $attach_list);							update_post_meta($id_post, 'price-products', $_POST['sale_price']);		}				if($gallery==1) update_post_meta($id_post, 'recall_slider', 1);		else delete_post_meta($id_post, 'recall_slider');				if($post_cat){			if($old->post_type=='post'){				$catargs = array(   				'orderby'                  => 'name'  				,'order'                    => 'ASC'  				,'hide_empty'               => 0 				,'hierarchical'=>true			);							$cats = get_categories( $catargs );			}						if($old->post_type=='products'){				$term_args = array( 'number' => 0 ,'offset' => 0 ,'orderby' => 'name' ,'order' => 'ASC' ,'hide_empty' => false ,'fields' => 'all' ,'slug' => '' ,'hierarchical' => true ,'name__like' => '' ,'pad_counts' => false ,'get' => '' ,'child_of' => 0 ,'parent' => '');  				$cats = get_terms('prodcat', $term_args);														}			$term_l = new Edit_Terms_List_rcl();			$new_cat = $term_l->get_terms_list($cats,$post_cat);						if($old->post_type=='post'){				$moderation = $rcl_options['moderation_public_post'];				if($moderation==1) $post_status = 'pending';				else $post_status = 'publish';								if($rcl_options['nomoder_rayt']){					$all_r = get_all_rayt_user(0,$user_ID);					if($all_r >= $rcl_options['nomoder_rayt']) $post_status = 'publish';				}								$postdata['post_status'] = $post_status;				$postdata['tags_input']     = $post_tags;				$postdata['post_category'] = $new_cat;			}						if($old->post_type=='products'){				$postdata['post_status'] = 'pending';				$postdata['tags_input']     = $post_tags;				$postdata['tax_input']['prodcat'] = $new_cat;			}		}else{			$moderation = $rcl_options['moderation_public_group'];			if($moderation==1) $post_status = 'pending';			else $post_status = 'publish';						if($rcl_options['nomoder_rayt']){				$all_r = get_all_rayt_user(0,$user_ID);				if($all_r >= $rcl_options['nomoder_rayt']) $post_status = 'publish';			}						$postdata['post_status'] = $post_status;		}		wp_update_post( $postdata );			if($id_form){			if($old->post_type=='products') edit_custom_fields_post_rcl($id_post,'custom_saleform_fields');			else edit_custom_fields_post_rcl($id_post);		}				if($post_status == 'pending'){			wp_redirect('/?p='.$id_post.'&preview=true');  exit;			}else{			wp_redirect( get_permalink($id_post) );  exit;				}					}function edit_post_rcl_recall_activate ( ) {  if ( isset( $_POST['edit-post-rcl'] )&&wp_verify_nonce( $_POST['_wpnonce'], 'edit-post-rcl' ) ) {    add_action( 'wp', 'edit_post_rcl_recall' );  }}add_action('init', 'edit_post_rcl_recall_activate');function delete_post_rcl_recall(){	global $rcl_options;		wp_delete_post( $_POST['post-rcl'] );	wp_redirect(get_permalink($rcl_options['public_form_page_rcl']));	exit;}function delete_post_rcl_recall_activate ( ) {  if ( isset( $_POST['delete-post-rcl'] )&&wp_verify_nonce( $_POST['_wpnonce'], 'delete-post-rcl' ) ) {    add_action( 'wp', 'delete_post_rcl_recall' );  }}add_action('init', 'delete_post_rcl_recall_activate');function public_form_recall($atts, $content = null){global $user_ID,$rcl_options,$wpdb,$options_gr,$group_id,$post;	if(!$user_ID){		echo '<p align="center">Вы должны быть авторизованы для возможности делать публикации.<br>Войдите или зарегистрируйтесь</p>';	}	extract(shortcode_atts(array(		'cats' => false,		'id' => 1,		'post_type'=> 'post',		'group_id'=>$group_id		),	$atts));		ob_start();	if(isset($_GET['rcl-post-edit'])){		$p = $_GET['rcl-post-edit'];		if(current_user_can('edit_post', $p)){			$postdata = get_post($p);			if(!$postdata)return false;			$post_type = $postdata->post_type;			$posttags = get_the_tags($p); 							if ($posttags) { 				foreach((array)$posttags as $tag){ 					if(++$cnt>1)$taglist .= ',';					$taglist .= $tag->name;				}			}			if($post_type=='post-group'){							}else{							if($post_type=='post') $cat_list = get_the_category($p);								if($post_type=='products'){ 					$post_cat = get_the_terms( $p, 'prodcat' );															/*$term_args = array( 'number' => 0 ,'offset' => 0 ,'orderby' => 'name' ,'order' => 'ASC' ,'hide_empty' => false ,'fields' => 'all' ,'slug' => '' ,'hierarchical' => true ,'name__like' => '' ,'pad_counts' => false ,'get' => '' ,'child_of' => 0 ,'parent' => ''); 					$allcats = get_terms('prodcat', $term_args); */					$Child_Terms = new Get_Child_Terms_Rcl();					$cat_list = $Child_Terms->get_terms_post($post_cat);				}			}		}else{			return false;		}	}	if($post_type=='post-group') $user_can = $rcl_options['user_public_access_group'];	else $user_can = $rcl_options['user_public_access_recall'];	if($user_can!='') $userinfo = get_userdata( $user_ID );	if($user_ID&&$userinfo->user_level>=$user_can||$user_can==''){ 				if($rcl_options['media_downloader_recall']==1) $media_buttons = 1;			else $media_buttons = 0;					$tinymce = 0;		$quicktags = 0;		$type_editor = $rcl_options['type_text_editor'];		if($type_editor==1||$type_editor==3) $tinymce = 1;		if($type_editor==2||$type_editor==3) $quicktags = 1;					$args = array( 'wpautop' => 1  				,'media_buttons' => $media_buttons  				,'textarea_name' => 'post_content'				,'textarea_rows' => 20  				,'tabindex' => null  				,'editor_css' => ''  				,'editor_class' => ''  				,'teeny' => 0  				,'dfw' => 0  				,'tinymce' => $tinymce  				,'quicktags' => $quicktags  			);		$cnt = 1;						if($post_type=='products'){			$term_args = array( 'number' => 0 ,'offset' => 0 ,'orderby' => 'name' ,'order' => 'ASC' ,'hide_empty' => false ,'fields' => 'all' ,'slug' => '' ,'hierarchical' => true ,'name__like' => '' ,'pad_counts' => false ,'get' => '' ,'child_of' => 0 ,'parent' => '');  			$allcats = get_terms('prodcat', $term_args); 		}		if($post_type=='post'){					if($cats) $ctg = $cats;			else $ctg = $rcl_options['id_parent_category'];							if($ctg){				$ctg_ar = explode(',',$ctg);				$cnt_c = count($ctg_ar);			}			$catargs = array(   				'orderby'                  => 'name'  				,'order'                    => 'ASC'  				,'hide_empty'               => 0   				,'hierarchical'=>true			);			$allcats = get_categories( $catargs );			$cnt = $rcl_options['count_category_post'];						}				//Получаем списки рубрик доступных к выбору в форме публикации		if($post_type=='post-group'){			if(!$group_id){				$groups = get_the_terms( $p, 'groups' );				foreach($groups as $group){$group_id = $group->term_id;}			}			if(!$options_gr) $options_gr = unserialize($wpdb->get_var("SELECT option_value FROM ".RCL_PREF."groups_options WHERE group_id='$group_id'"));			$catlist = get_tags_list_group_rcl($options_gr['tags'],$p);		}else{			$sel = new List_Terms_rcl();			$catlist = $sel->get_select_list($allcats,$cat_list,$cnt,$ctg);		}				if($post_type=='products') $get_fields = get_option('custom_saleform_fields');		if($post_type=='post') $get_fields = get_option( 'custom_public_fields_'.$id );		$get_fields = unserialize( $get_fields);				if($get_fields){								$public_fields = get_custom_fields_list_rcl($get_fields,$p);		}		 echo '<div class="public_block">		 <form onsubmit="document.getElementById(\'edit-post-rcl\').disabled=true;document.getElementById(\'edit-post-rcl\').value=\'Идет отправка, пожалуйста, подождите..\';"  action="" method="post" enctype="multipart/form-data">		 '.wp_nonce_field('edit-post-rcl','_wpnonce',true,false).'		 <label>Заголовок:</label>		 <input type="text" maxlength="150" required value="'.$postdata->post_title.'" name="post_title" id="post_title_input">';		 if(!$p||$postdata->post_type=='post'||$postdata->post_type=='products'||$postdata->post_type=='post-group') echo '<label>Категория:</label>'.$catlist;		 echo '<label>Текст записи:</label>';			 		 wp_editor( $postdata->post_content, 'contentarea', $args );		 if($public_fields) echo $public_fields;		 if($post_type=='products') echo '<p><b>Стоимость файла <span class="required">*</span></b>: <input type="numeric" maxlength="10" name="sale_price" required id="sale_price" value="'.get_post_meta($p,'price-products',1).'" style="width: 10%;"> рублей</p>';		 if(!$p||$postdata->post_type=='post'||$postdata->post_type=='products') echo '<p><label>Метки: <small>(метки вписываются через запятую)</small></label> 		 <input type="text" maxlength="200" name="post_tags" id="post_tags" value="'.$taglist.'"></p>';		 		 if($post_type=='products'){			if($p) echo '<label>Замена файла <small>(не более 10 Мб, zip,rar,7zip и тп)</small>:</label>			 <div style="clear:both;margin:15px 0;" id="fileupdate-btn" class="btn btn-success js-fileapi-wrapper">				   <div class="js-browse">					  <span class="btn-txt">Заменить версию продаваемого файла</span>					  <input type="file" name="filedata">				   </div>				   <div class="js-upload" style="display: none">					  <div class="progress progress-success">						 <div class="js-progress bar"></div>					  </div>					  <span class="btn-txt">Загрузка (<span class="js-size"></span>)</span>				   </div>				</div><div id="fileupdate-status" class="floatright"></div>';			else echo '<label>Продаваемый файл (rar, zip, 7z/не более 7МВ) <span class="required">*</span>:</label><input required type="file" name="archive_file" class="field"/>';		}				new Rcl_Thumb_Form($p);		echo '<div align="right">';				if($p){					echo '<input class="recall-button" type="submit" id="edit-post-rcl" value="Изменить">			<input type="hidden" name="post-rcl" value="'.$p.'">			<input type="hidden" name="edit-post-rcl" value="1">';					}else{								echo '<input class="recall-button" id="edit-post-rcl" type="submit" value="Опубликовать">';						if($post_type=='post-group') 				echo '<input type="hidden" name="term_id" value="'.$group_id.'">				<input type="hidden" name="public_in_group_recall" value="1">';			else if($post_type=='products') 				echo '<input type="hidden" name="add_new_salefile" value="1">				<input type="hidden" name="formpage" value="'.$post->ID.'">';			else 				echo '<input type="hidden" name="add_new_post" value="1">';						}				echo '<input type="hidden" value="'.$id.'" name="id_form" id="id_form">';				echo '</div></form>';				if($p){			echo '<form method="post" action="">			'.wp_nonce_field('delete-post-rcl','_wpnonce',true,false).'			<input class="alignleft recall-button" type="submit" style="width:120px;" onsubmit="return confirm(\'Вы уверены? Потом восстановить не получиться!\');" name="delete-post-rcl" value="Удалить">							<input type="hidden" name="post-rcl" value="'.$p.'"></form>';		}				echo '</div>';			}else{		if($post_type=='post-group') echo '<div class="public-post-group"><h3 >Сожалеем, но у вас нет прав для публикации внутри групп :(</h3></div>';		else echo '<h3 class="aligncenter">Сожалеем, но у вас нет прав<br>для публикации записей на этом сайте :(</h3>';	}		$content = ob_get_contents();	ob_end_clean();	return $content;}add_shortcode('public-form','public_form_recall');class Rcl_Thumb_Form{	public $post_id;	public $thumb = 0;		public function __construct($p_id) {		$this->post_id = $p_id;		$this->post_type = $p_type;		$this->gallery_init();    }		function gallery_init(){		global $rcl_options;				if(!$rcl_options['media_downloader_recall']) $this->gallery_rcl();		else $this->thumbnail_post();	 	}		function gallery_rcl(){		global $user_ID;				if($this->post_id) $gal = get_post_meta($this->post_id, 'recall_slider', 1);		echo '<p><label><input ';		if(!$this->post_id) echo 'checked="checked"';		echo 'type="checkbox" '.checked($gal,1,false).' name="add-gallery-rcl" value="1"> - Вывести все прикрепленные изображения в галерее.</label>		<small>Для вывода изображений в определенных местах своей публикации вы можете<br>использовать шорткоды [art id="123"], размещая их в том месте публикации, где желаете видеть изображение. Можно указать размер изображения thumbnail,medium или full, например: [art id="123" size="medium"]. Требуемый размер также можно указывать числовыми значениями через запятую (ширина, высота), например: [art id="123" size="450,300"]</small></p>';				if($this->post_id){			$args = array( 			'post_parent' => $this->post_id,			'post_type'   => 'attachment', 			'numberposts' => -1,			'post_status' => 'any',			'post_mime_type'=> 'image'			);			$child = get_children($args);			if($child){ foreach($child as $ch){$temp_gal[]['ID']=$ch->ID;} }			$this->thumb = get_post_meta($this->post_id, '_thumbnail_id',1);					}else{			$temp_gal = unserialize(get_the_author_meta('tempgallery',$user_ID));		}		if($temp_gal) $attachlist = $this->get_gallery_list($temp_gal);		echo '<ul id="temp-files">'.$attachlist.'</ul>		<div id="status-temp"></div>		<div id="postupload">		<div class="b-upload__dnd">		  			  <div class="b-upload__hint">Добавить изображения в очередь загрузки</div>			  <div class="js-files b-upload__files">				 <div class="js-file-tpl b-thumb" data-id="<%=uid%>" title="<%-name%>, <%-sizeText%>">					<div data-fileapi="file.remove" class="b-thumb__del">✖</div>					<div class="b-thumb__preview">					   <div class="b-thumb__preview__pic"></div>					</div>					<% if( /^image/.test(type) ){ %>					   <div data-fileapi="file.rotate.cw" class="b-thumb__rotate"></div>					<% } %>					<div class="b-thumb__progress progress progress-small"><div class="bar"></div></div>					<div class="b-thumb__name"><%-name%></div>				 </div>			  </div>			  <hr>			  <div class="btn btn-success btn-small js-fileapi-wrapper">				 <span>Добавить</span>				 <input name="filedata" type="file">			  </div>			  <div class="js-upload btn btn-success btn-small">				 <span>Загрузить</span>			  </div>		   		   </div>		</div>';	}		function get_gallery_list($temp_gal){		foreach((array)$temp_gal as $attach){			$small_url = wp_get_attachment_image_src( $attach['ID'], 'thumbnail' );			$attachlist .= '<li id="li-'.$attach['ID'].'"><span class="delete"></span><label><img src="'.$small_url[0].'"><span><input type="checkbox" class="thumb-foto" '.checked($this->thumb,$attach['ID'],false).' id="thumb-'.$attach['ID'].'" name="thumb['.$attach['ID'].']" value="1"> - главное</span></label><span>[art id="'.$attach['ID'].'"]</span>			</li>';		}		return $attachlist;	}		function thumbnail_post(){		echo '<div id="thumbblock-post" class="clear">			<div id="thumbnail_rcl" class="alignleft">';			if($this->thumb){				$thumb_url = wp_get_attachment_image_src( $this->thumb, 'thumbnail' );				echo '<span class="delete"></span><img width="100" height="100" src="'.$thumb_url.'"><input type="hidden" name="thumb" value="'.$this->thumb.'">';			}			echo '</div>			<h3>Миниатюра записи</h3>			<p>				<div class="wp-media-buttons">					<a href="#" id="add_thumbnail_rcl" class="recall-button" title="Добавить миниатюру">Назначить миниатюру</a>				</div>			</p>		</div>';	}}add_action('admin_init', 'custom_fields_editor_post_rcl', 1);function custom_fields_editor_post_rcl() {    add_meta_box( 'custom_fields_editor_post', 'Произвольные поля формы публикации', 'custom_fields_list_posteditor_rcl', 'post', 'normal', 'high'  );}function custom_fields_list_posteditor_rcl($post){	$get_fields = get_option( 'custom_public_fields_1');	$get_fields = unserialize( $get_fields);	if($get_fields) echo get_custom_fields_list_rcl($get_fields,$post->ID); ?>	<input type="hidden" name="custom_fields_nonce_rcl" value="<?php echo wp_create_nonce(__FILE__); ?>" />	<?php}function get_custom_fields_list_rcl($get_fields,$post_id=false){	foreach((array)$get_fields as $custom_field){						$slug = str_replace('-','_',$custom_field['slug']);		if($custom_field['requared']==1) $req = 'required';		else $req = '';		if($post_id) $postmeta = get_post_meta($post_id,$slug,1);		$public_fields .= '<tr><th><label>'.$custom_field['title'].':</label></th>';		if($custom_field['type']=='text')			$public_fields .= '<td><input type="text" '.$req.' name="'.$slug.'" class="regular-text" id="'.$slug.'" maxlength="50" value="'.$postmeta.'" /><br/></td>';		if($custom_field['type']=='textarea')			$public_fields .= '<td><textarea '.$req.' name="'.$slug.'" class="regular-text" id="'.$slug.'" rows="5" cols="50">'.$postmeta.'</textarea></td>';		if($custom_field['type']=='select'){			$fields = explode('#',$custom_field['field_select']);			$count_field = count($fields);			$field_select = '';			for($a=0;$a<$count_field;$a++){				$field_select .='<option value="'.$fields[$a].'" '.selected($postmeta,$fields[$a],false).'>'.$fields[$a].'</option>';			}			$public_fields .= '<td><select '.$req.' name="'.$slug.'" class="regular-text" id="'.$slug.'">'.$field_select.'</select></td>';		}		if($custom_field['type']=='checkbox'){			$chek = explode('#',$custom_field['field_select']);			$count_field = count($chek);			$public_fields .='<td>';										for($a=0;$a<$count_field;$a++){				$slug_chek = $slug.'_'.$a;												$public_fields .='<input '.$req.' type="checkbox" name="'.$slug_chek.'" value="'.$chek[$a].'" '.checked(get_post_meta($post_id,$slug_chek,1),$chek[$a],false).'> '.$chek[$a].'<br/>';			}			$public_fields .='</td>';		}		if($custom_field['type']=='radio'){			$radio = explode('#',$custom_field['field_select']);			$count_field = count($radio);			$public_fields .='<td>';			for($a=0;$a<$count_field;$a++){				$public_fields .='<input type="radio" name="'.$slug.'" '.checked($postmeta,$radio[$a],false).' class="regular-text" value="'.$radio[$a].'"> '.$radio[$a].'<br/>';			}			$public_fields .='</td>';		}		$public_fields .= '</tr>';					}	if($public_fields) $public_fields = '<table>'.$public_fields.'</table>';	return $public_fields;}function edit_custom_fields_post_rcl($post_id,$id_filds='custom_public_fields_1'){	$get_fields = get_option( $id_filds );	$get_fields = unserialize( $get_fields);			if($get_fields){					foreach((array)$get_fields as $custom_field){							$slug = str_replace('-','_',$custom_field['slug']);			if($custom_field['type']=='checkbox'){				$chek = explode('#',$custom_field['field_select']);				$count_field = count($chek);				for($a=0;$a<$count_field;$a++){					$slug_chek = $slug.'_'.$a;					if($_POST[$slug_chek]){						update_post_meta($post_id, $slug_chek, $_POST[$slug_chek]);													}else{						if(get_post_meta($post_id, $slug_chek, 1)) delete_post_meta($post_id, $slug_chek);					}				}			}			if($_POST[$slug]){				update_post_meta($post_id, $slug, $_POST[$slug]);									}else{				if(get_post_meta($post_id, $slug, 1)) delete_post_meta($post_id, $slug);			}		}	}}add_action('save_post', 'custom_fields_fields_update_rcl', 0);function custom_fields_fields_update_rcl( $post_id ){global $wpdb;    if ( !wp_verify_nonce($_POST['custom_fields_nonce_rcl'], __FILE__) ) return false;	if ( defined('DOING_AUTOSAVE') && DOING_AUTOSAVE  ) return false;	if ( !current_user_can('edit_post', $post_id) ) return false;		edit_custom_fields_post_rcl($post_id);		return $post_id;}if(!is_admin()) add_filter('get_edit_post_link','rcl_edit_post_link',999,3);function rcl_edit_post_link($admin_url, $post_id, $context){	global $user_ID,$rcl_options;	get_currentuserinfo();	$access = 7;	if($rcl_options['consol_access_rcl']) $access = $rcl_options['consol_access_rcl'];	$user_info = get_userdata($user_ID);			if ( $user_info->user_level < $access ){		$edit_url = get_redirect_url_rcl(get_permalink($rcl_options['public_form_page_rcl']));		return $edit_url.'rcl-post-edit='.$post_id;	}else{		return $admin_url;		}}function get_footer_scripts_public_rcl($script){	global $rcl_options;	if($rcl_options['public_gallery_weight']) $weight = $rcl_options['public_gallery_weight'];	else $weight = '2';		if(!$rcl_options['count_image_gallery']) $rcl_options['count_image_gallery'] = 1;	$script .= "			var post_id_edit = jQuery('input[name=\"post-rcl\"]').val();	jQuery('#postupload').fileapi({		   url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/publicpost/upload-file.php?post_id='+post_id_edit,		   multiple: true,		   maxSize: ".$weight." * FileAPI.MB,		   maxFiles:".$rcl_options['count_image_gallery'].",		   clearOnComplete:true,		   paramName:'uploadfile',		   accept: 'image/*',		   elements: {			  ctrl: { upload: '.js-upload' },			  empty: { show: '.b-upload__hint' },			  emptyQueue: { hide: '.js-upload' },			  list: '.js-files',			  file: {				 tpl: '.js-file-tpl',				 preview: {					el: '.b-thumb__preview',					width: 100,					height: 100				 },				 upload: { show: '.progress', hide: '.b-thumb__rotate' },				 complete: { hide: '.progress' },				 progress: '.progress .bar'				}		   },		   onSelect: function (evt, data){				data.all; 				data.files; 				if( data.other.length ){									var errors = data.other[0].errors;					if( errors ){						if(errors.maxSize) alert('Превышен допустимый размер файла.\nОдин файл не более ".$weight."MB');					}				}			},			onFilePrepare:function(evt, uiEvt){";			if($rcl_options['count_image_gallery']){				$script .= "var num = jQuery('#temp-files li').size();				if(num>=".$rcl_options['count_image_gallery']."){					jQuery('#status-temp').html('<span style=\"color:red;\">Вы уже достигли предела загрузок</span>');					jQuery('#postupload').fileapi('abort');				}";			}			$script .= "},			onFileComplete:function(evt, uiEvt){				var result = uiEvt.result;				if(result['string']){					jQuery('#temp-files').append(result['string']);";				if($rcl_options['count_image_gallery']){					$script .= "var num = jQuery('#temp-files li').size();					if(num>=".$rcl_options['count_image_gallery']."){						jQuery('#status-temp').html('<span style=\"color:red;\">Вы уже достигли предела загрузок</span>');						jQuery('#postupload').fileapi('abort');					}";				}			$script .= "}			},			onComplete:function(evt, uiEvt){				var result = uiEvt.result;				jQuery('#postupload .js-files').empty();			}	});";	return $script;}add_filter('file_footer_scripts_rcl','get_footer_scripts_public_rcl');function get_scripts_public_rcl($script){		$ajaxdata = "type: 'POST', data: dataString, dataType: 'json', url: '".get_bloginfo('wpurl')."/wp-admin/admin-ajax.php',";	$ajaxfile = "type: 'POST', data: dataString, dataType: 'json', url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/add-on/publicpost/ajax-request.php',";	$script .= "		jQuery('form[name=\'public_post\'] input[name=\'edit-post-rcl\'],form[name=\'public_post\'] input[name=\'add_new_task\']').click(function(){			var error=0;			jQuery('form[name=\'public_post\']').find(':input').each(function() {				for(var i=0;i<field.length;i++){					if(jQuery(this).attr('name')==field[i]){						if(jQuery(this).val()==''){							jQuery(this).attr('style','border:1px solid red !important');							error=1;						}else{							jQuery(this).attr('style','border:1px solid #E6E6E6 !important');						}					}				}			});									if(error==0) return true;			else return false; 		});	/* Первый шаг редактирования поста */		jQuery('#edit-post').live('click',function(){			var edit_post = jQuery(this).attr('value');			var dataString = 'action=step_one_redactor_post&post_id='+edit_post+'&user_ID='+user_ID;			jQuery.ajax({				".$ajaxfile."				success: function(data){					if(data['result']==100){						jQuery('#rcl-overlay').fadeIn();						jQuery('#rcl-popup').html(data['content']);						var screen_top = jQuery(window).scrollTop();						var popup_h = jQuery('#rcl-popup').height();						var window_h = jQuery(window).height();						screen_top = screen_top + 60;						jQuery('#rcl-popup').css('top', screen_top+'px').delay(100).slideDown(400);											}else{						alert('Ошибка!');					}				} 			});	  				return false;		});	/* Второй шаг редактирования поста */		jQuery('.updatesteptwo').live('click',function(){			var post_title = jQuery('#post_title_edit').attr('value');			var post_content = jQuery('#content_area_edit').attr('value');			var post_post_id = jQuery('#post_id_edit').attr('value');			var dataString = 'action=step_two_redactor_post&post_title='+post_title+'&post_content='+post_content+'&post_id='+post_post_id+'&user_ID='+user_ID;;			jQuery.ajax({			".$ajaxfile."			success: function(data){				if(data['otvet']==100){					jQuery('#rcl-popup').html('<div class=\'float-window-recall\' style=\'display:block;\'><p style=\'padding:5px;text-align:center;background:#fff\'>Материал обновлен</p></div>');					jQuery('#rcl-popup').delay(1000).fadeOut(1000);					jQuery('#rcl-overlay').delay(1500).fadeOut(1000);					jQuery('#post-title-'+data['post_id']).html(data['post_title']);				} else {				   alert('Нет данных.');				}			} 			});	  				return false;		});	/* Удаление поста */			jQuery('#delete-post').live('click',function(){			if(confirm('Действительно удалить?')){				var del_post = jQuery(this).attr('value');				jQuery('#post-'+del_post).remove();				var dataString = 'action=delete_redactor_post&post_id='+ del_post;				jQuery.ajax({					".$ajaxdata."				});	  				} 			return false;		});		jQuery('ul#temp-files li .delete').live('click',function(){			var id_attach = parseInt(jQuery(this).parent().attr('id').replace(/\D+/g,''));			var dataString = 'action=delete_redactor_post&post_id='+ id_attach;			jQuery.ajax({				".$ajaxdata."				success: function(data){					if(data['result']==100){						jQuery('#temp-files #li-'+id_attach).remove();						jQuery('#status-temp').empty();					}else{						alert('Ошибка!');					}				} 			});	  				return false;		});		jQuery('.posts_rcl_block .sec_block_button').live('click',function(){			var btn = jQuery(this);			get_page_content_rcl(btn,'posts_rcl_block');			return false;		});	function get_page_content_rcl(btn,id_page_rcl){					if(btn.hasClass('active'))return false;			var start = btn.attr('data');			var type = btn.attr('type');			var id_user = parseInt(jQuery('.wprecallblock').attr('id').replace(/\D+/g,''));			jQuery('.'+id_page_rcl+' .sec_block_button').removeClass('active');			btn.addClass('active');			var dataString = 'action=get_page_content_rcl&start='+start+'&type='+type+'&id_user='+id_user;			jQuery.ajax({				type: 'POST', data: dataString, dataType: 'json', url: '".get_bloginfo('wpurl')."/wp-content/plugins/recall/ajax-data/posts-list.php',								success: function(data){					if(data['recall']==100){						jQuery('.'+id_page_rcl+' .publics-table-rcl').html(data['post_content']);											} else {						alert('Error');					}				} 			});						return false;	}		";	return $script;}add_filter('file_scripts_rcl','get_scripts_public_rcl');?>